{"version":3,"sources":["assets/logo_with_text.png","../node_modules/encoding/lib sync","helpers/file.js","models/dialogs.js","actions/dialogs.js","actions/messages.js","actions/users.js","actions/currentUser.js","reducers/reducer-function.js","reducers/index.js","reducers/currentUser.js","reducers/dialogs.js","reducers/selectedDialog.js","actions/selectedDialog.js","reducers/messages.js","reducers/users.js","store.js","models/message.js","models/user.js","helpers/constants.js","services/chat-service.js","services/auth-service.js","helpers/loader/loader.js","components/auth/auth.js","helpers/avatar/avatar.js","components/home/sideBar/userProfile/userProfile.js","helpers/LayoutUtil.js","helpers/lastDate.js","components/home/sideBar/dialogs/dialogs.js","components/home/sideBar/sideBar.js","helpers/imagePicker/cropImage.js","helpers/imagePicker/imagePicker.js","components/home/chat/chatInput/chatInput.js","services/users-service.js","components/home/chat/message/messageStatus.js","components/home/chat/message/message.js","components/home/chat/chat.js","components/home/splashPage/splashPage.js","components/home/createDialog/createDialogHeader/header.js","components/home/createDialog/renderUser/renderUser.js","components/home/createDialog/createDialog.js","components/home/home.js","components/main.js","serviceWorker.js","index.js"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","getImageLinkFromUID","uid","ConnectyCube","storage","privateUrl","Dialog","dialog","this","_id","type","xmpp_room_jid","xmpp_type","name","photo","getAvatarUrl","description","destination","room_jid","user_id","admins_ids","occupants_ids","updated_date","Date","parse","updated_at","now","last_message_date_sent","created_at","last_message","last_message_id","last_message_user_id","unread_messages_count","unread_messages_ids","pinned_messages_ids","avatarUID","fetchDialogs","dialogs","updateDialog","addNewDialog","sortDialogs","message","count","updateMessages","dialogId","msgId","msg","pushMessage","fetchUsers","users","setCurrentUser","currentUser","action","alreadyUpdatedDialog","map","elem","Object","assign","lazyFetchMessages","messages","newArr","history","reverse","concat","sortedDialog","result","items","inverted","sort","itemA","itemB","dialog_id","newObj","body","date_sent","updateStatusMessages","length","newMessages","index","updateSendStatus","send_state","newObjUsers","forEach","appReducer","combineReducers","user","filter","selectedDialog","reverted","mergedUpdatedMessages","rootReducer","state","store","createStore","GROUP_CHAT_ALERT_TYPE","defaultMessage","Math","floor","attachments","sender_id","sender","Message","group_chat_alert_type","chat_dialog_id","extension","getSendState","attachment","getAttachment","parseLink","url","read_ids","find","delivered_ids","FakeMessage","undefined","User","avatar","login","custom_data","full_name","phone","last_request_at","DIALOG_TYPE","chatService","getMoreMessages","a","currentMessages","getMessagesByDialogId","lastMessageDate","updateObj","last_messages_for_fetch","lt","sort_desc","chat","list","moreHistoryFromServer","push","dispatch","amountMessages","sendMsgChatAlertOnCreate","alertType","date","recipient_id","messageExtensions","save_to_history","send","updateDialogsUnreadMessagesCount","onMessageListener","bind","onSentMessageCallback","onSentMessageListener","onDeliveredStatusListener","onDeliveredStatus","onReadStatusListener","onReadStatus","getState","dialogsFromServer","currentUserId","privatChatIdsUser","getUsersList","usersInfo","isAlredyUpdate","isAlreadyMessageFetch","historyFromServer","firstUnreadMsg","readAllMessages","sendReadStatus","messageText","scrollToBottom","text","trim","messageUniqueId","sendMessageAsAttachment","newObjFreez","freeze","URL","createObjectURL","file","uploadPhoto","response","newObjAttach","size","content_type","width","height","userId","params","create","getUserFromReduxById","getUserFromServerById","UserModel","groupName","img","unshift","image","newDialog","update","read","messageId","senderId","getSelectedDialog","readMessage","message_id","sendDeliveredStatus","failedMessage","console","warn","ids","get","per_page","field","param","value","usersList","createAndUpload","helpers","getBsonObjectId","AuthService","init","appConfig","connectyCubeConfig","autologin","getUserSession","checkUserSessionFromStore","data","JSON","signIn","password","createSession","session","customSession","setUserSession","connect","signup","userSession","localStorage","setItem","CURRENT_USER_SESSION_KEY","stringify","getItem","clear","logout","DEVICE_TOKEN_KEY","authService","Loader","className","Component","Auth","isLogin","isLoader","isAuthorization","handleStateModal","setState","changeName","event","target","changeLogin","changePassword","preventDefault","dataUser","then","catch","error","swal","signUp","endMessage","authText","authLink","style","props","isSmallDevice","backgroundColor","to","src","logo","alt","onSubmit","onChange","required","placeholder","onClick","Avatar","borderRadius","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","colors","randomizeColor","fontSize","words","split","slice","getIconLabel","toUpperCase","UserProfile","customStyles","content","top","left","right","bottom","transform","border","padding","showMoreInformation","isModal","handleCloseModal","logOut","settings","alert","icon","faChevronUp","color","faChevronDown","isOpen","onRequestClose","ariaHideApp","overlayClassName","DialogLayoutUtil","LayoutProvider","dim","ChatLayoutUtil","maxWidth","GetMaxWidthMsg","arr","maxWidthMsg","currentSender","otherSender","ctx","document","createElement","getContext","font","txt","calcWidth","measureText","lines","ceil","maxScrollWidth","getTime","dateSent","hours","getHours","minutes","getMinutes","scrollWidth","scrollHeight","listenerWindowSize","timer","allDialog","handleResize","getElementById","clientWidth","clientHeight","setTimeout","clearTimeout","isAlredy","layoutProvider","getDialogLayoutProvider","changeSearch","includes","search","dataProvider","cloneWithRows","goToChat","item","router","ChatService","setSelectDialog","createNewDialog","_renderDialog","lastDate","lastMessage","updatedDate","monthes","msgLastDate","msgYear","getFullYear","msgMonth","getMonth","msgDate","getDate","msgDay","getDay","msgHours","msgMinutes","LastDate","curYear","curMonth","curDate","curDay","DataProvider","r1","r2","window","addEventListener","fetchDialogsFromServer","prevProps","removeEventListener","faUserPlus","faSearch","position","_data","rowRenderer","SideBar","createImage","Promise","reject","Image","setAttribute","getRadianAngle","degreeValue","PI","getCroppedImg","imageSrc","pixelCrop","rotation","canvas","maxSize","max","safeArea","sqrt","translate","rotate","drawImage","getImageData","putImageData","x","y","toBlob","newFile","File","imageInfo","public","link","boxShadow","ImagePicker","croppedAreaPixels","cropedImage","onCropChange","crop","onCropComplete","croppedArea","cropImage","getImage","onZoomChange","zoom","handleOpenModal","onImageChange","files","_renderAvatarPicker","htmlFor","faCamera","_renderAttachmentPicker","faPaperclip","pickAsAttachment","cropSize","ChatInput","changeMessage","sendMessage","sendMessageCallback","faPaperPlane","PureComponent","getUsers","idsForFetch","usersFromServer","newUsers","usersIdsToIgnore","allUsers","contacts","MessageSendState","faClock","faCheck","faCheckDouble","selectedImg","_renderAsStr","whoIsSender","wordWrap","renderZoomImg","_renderAsAttachment","cursor","participantInfo","notRenderAvatar","widthScroll","withMsg","faTimesCircle","Chat","isFetchingMsg","messagesListRef","listenerLazyLoad","needToGetMoreMessage","recycler_Y","contentHeight","contentNewOffset","lazyLoadMessages","nativeEvent","contentSize","getDialogInfo","getDialogById","UsersService","getOccupants","getMessages","getChatLayoutProvider","currentUserInfo","updateScrollPosition","getElement","children","fullScrollHeight","newOffset","scrollToOffset","goToSplashPage","_renderMessage","scrollToIndex","prewProps","log","currentDialog","innerWidth","faChevronLeft","ref","onScroll","SplashPage","createDialogHeader","isSelectedUser","selectUsers","selectedUsers","dialogType","toggleUserSelect","faCheckCircle","faDotCircle","faArrowRight","CreateDialog","listUsers","userNotFound","isGroupDetails","isUpdate","createDialog","str","dialogName","createPublicDialog","sendChatAlertOnCreate","searchUsers","keyword","listUsersByFullName","changeTypeDialog","createPrivateDialog","_renderUser","isSelected","key","changeDialogName","_renderSelectedUsers","renderHeader","calHeight","faUsers","faUser","Home","changeRouter","routerUrl","routName","match","replace","windowWidth","setUpListeners","Row","Col","sm","md","lg","xl","exact","path","component","Main","initUser","routLink","Boolean","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bc65d8a6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo_with_text.34ab4cf5.png\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 287;","import ConnectyCube from 'connectycube'\r\n\r\nexport function getImageLinkFromUID(uid) {\r\n  if (!uid) {\r\n    return null\r\n  }\r\n  return ConnectyCube.storage.privateUrl(uid)\r\n}\r\n\r\n\r\nexport function preparationAttachment(file) {\r\n  return {\r\n    size: file.size,\r\n    uid: file.uid,\r\n    type: file.content_type,\r\n    name: file.name,\r\n    width: 400,\r\n    height: 400\r\n  }\r\n}\r\n","import { getImageLinkFromUID } from '../helpers/file'\r\n\r\nexport default class Dialog {\r\n  constructor(dialog) {\r\n    this.id = dialog._id || dialog.id\r\n    this.type = dialog.type\r\n    this.xmpp_room_jid = dialog.xmpp_room_jid\r\n    this.xmpp_type = dialog.type === 3 ? 'chat' : dialog.type ? 'groupchat' : ''\r\n    this.name = dialog.name\r\n    this.photo = Dialog.getAvatarUrl(dialog.photo)\r\n    this.description = dialog.description\r\n    this.destination = dialog.xmpp_room_jid || dialog.room_jid\r\n    this.user_id = dialog.user_id\r\n    this.admins_ids = dialog.admins_ids\r\n    this.occupants_ids = dialog.occupants_ids\r\n    this.updated_date = Date.parse(dialog.updated_at) || Date.now()\r\n    this.last_message_date_sent = dialog.last_message_date_sent || Date.parse(dialog.updated_at) / 1000 || Date.parse(dialog.created_at) / 1000\r\n    this.last_message = dialog.last_message || ''\r\n    this.last_message_id = dialog.last_message_id\r\n    this.last_message_user_id = dialog.last_message_user_id\r\n    this.unread_messages_count = dialog.unread_messages_count\r\n    this.unread_messages_ids = dialog.unread_messages_ids\r\n    this.pinned_messages_ids = dialog.pinned_messages_ids\r\n  }\r\n\r\n  static getAvatarUrl(avatarUID) {\r\n    return getImageLinkFromUID(avatarUID)\r\n  }\r\n}\r\n","export const FETCH_DIALOGS = 'FETCH_DIALOGS'\r\nexport const ADD_DIALOG = 'ADD_DIALOG'\r\nexport const SORT_DIALOGS = 'SORT_DIALOGS'\r\nexport const UPDATE_DIALOG = 'UPDATE_DIALOG'\r\nexport const DELETE_DIALOG = 'DELETE_DIALOG'\r\n\r\nexport const fetchDialogs = dialogs => ({ type: FETCH_DIALOGS, dialogs: dialogs })\r\nexport const updateDialog = dialog => ({ type: UPDATE_DIALOG, dialog })\r\nexport const addNewDialog = dialog => ({ type: ADD_DIALOG, dialog: dialog })\r\nexport const sortDialogs = (message, count) => ({ type: SORT_DIALOGS, message: message, count: count })\r\nexport const deleteDialog = dialogId => ({ type: DELETE_DIALOG, dialogId })\r\n","export const FETCH_MESSAGES = 'FETCH_MESSAGES'\r\nexport const PUSH_MESSAGE = 'PUSH_MESSAGE'\r\nexport const DELETE_ALL_MESSAGES = 'DELETE_ALL_MESSAGES'\r\nexport const LAZY_FETCH_MESSAGES = 'LAZY_FETCH_MESSAGES'\r\nexport const UPDATE_MESSAGES = 'UPDATE_MESSAGES'\r\n\r\nexport const fetchMessages = (dialogId, history) => ({ type: FETCH_MESSAGES, dialogId, history })\r\nexport const lazyFetchMessages = (dialogId, history) => ({ type: LAZY_FETCH_MESSAGES, dialogId, history })\r\nexport const updateMessages = (dialogId, msgId, msg) => ({ type: UPDATE_MESSAGES, dialogId, msgId, msg })\r\nexport const pushMessage = (message, dialogId) => ({ type: PUSH_MESSAGE, message, dialogId })\r\nexport const deleteAllMessages = dialogId => ({ type: DELETE_ALL_MESSAGES, dialogId })","export const FETCH_USERS = 'FETCH_USERS'\r\nexport const ADD_USERS = 'ADD_USERS'\r\n\r\n\r\nexport const fetchUsers = users => ({ type: FETCH_USERS, users })\r\nexport const addUsers = users => ({ type: ADD_USERS, users })\r\n","export const SET_CURRENT_USER = 'SET_CURRENT_USER'\r\nexport const RESET_CURRENT_USER = 'RESET_CURRENT_USER'\r\nexport const UPDATE_CURRENT_USER = 'UPDATE_CURRENT_USER'\r\n\r\nexport const setCurrentUser = currentUser => ({ type: SET_CURRENT_USER, currentUser })\r\nexport const resetCurrentUser = () => ({ type: RESET_CURRENT_USER })\r\nexport const updateCurrentUser = currentUser => ({ type: UPDATE_CURRENT_USER, currentUser })\r\n","const updateDialog = (action, dialogs) => {\r\n  const alreadyUpdatedDialog = dialogs.map(elem => {\r\n    if (elem.id === action.dialog.id) {\r\n      return Object.assign(elem, action.dialog)\r\n    } return elem\r\n  })\r\n  return [...alreadyUpdatedDialog]\r\n}\r\n\r\nconst lazyFetchMessages = (action, messages) => {\r\n  const newArr = action.history.reverse().concat(messages[action.dialogId])\r\n  return { ...{}, [action.dialogId]: newArr }\r\n}\r\n\r\nconst sortedDialog = (action, dialogs) => {\r\n  const { message, count } = action\r\n  const updateDialog = dialogs.map(elem => {\r\n    if (elem.id === message.dialog_id) {\r\n      const newObj = {\r\n        last_message: message.body,\r\n        last_message_date_sent: message.date_sent,\r\n        updated_date: message.date_sent,\r\n        unread_messages_count: count ? elem.unread_messages_count += 1 : elem.unread_messages_count\r\n      }\r\n      return Object.assign(elem, newObj)\r\n    } return elem\r\n  })\r\n\r\n  const sort = (items, inverted = false) => items.sort((itemA, itemB) => {\r\n    const result = new Date(itemB.last_message_date_sent * 1000) - new Date(itemA.last_message_date_sent * 1000)\r\n    return inverted ? !result : result\r\n  })\r\n\r\n\r\n  const result = sort(updateDialog)\r\n\r\n  return [...result]\r\n}\r\n\r\nconst updateStatusMessages = (action, message) => {\r\n  if (Object.keys(message).length === 0) {\r\n    return message\r\n  }\r\n\r\n  const newMessages = message[action.dialogId].map((elem, index) => {\r\n    if (elem.id === action.msgId) {\r\n      const updateSendStatus = { ...elem }\r\n      updateSendStatus.send_state = action.msg.send_state\r\n      return { ...updateSendStatus }\r\n    }\r\n    return elem\r\n  })\r\n\r\n  const result = { ...message, [action.dialogId]: newMessages }\r\n\r\n  return result\r\n}\r\n\r\nconst fetchUsers = (action, users) => {\r\n  const newObjUsers = {}\r\n  action.forEach(elem => {\r\n    newObjUsers[elem.id] = elem\r\n  })\r\n  return { ...users, ...newObjUsers }\r\n}\r\n\r\nexport {\r\n  updateDialog,\r\n  lazyFetchMessages,\r\n  sortedDialog,\r\n  updateStatusMessages,\r\n  fetchUsers\r\n}","import { combineReducers } from 'redux'\r\nimport currentUser from './currentUser'\r\nimport dialogs from './dialogs'\r\nimport selectedDialog from './selectedDialog'\r\nimport messages from './messages'\r\nimport users from './users'\r\n\r\nconst appReducer = combineReducers({\r\n  currentUser,\r\n  dialogs,\r\n  selectedDialog,\r\n  messages,\r\n  users,\r\n})\r\n\r\n\r\nexport const LogOut = () => ({ type: 'RESSET_STORE' })\r\n\r\nconst rootReducer = (state, action) => {\r\n  if (action.type === 'RESSET_STORE') {\r\n    state = {}\r\n  }\r\n  return appReducer(state, action)\r\n}\r\n\r\n\r\nexport default rootReducer","import {\r\n  SET_CURRENT_USER,\r\n  UPDATE_CURRENT_USER,\r\n  RESET_CURRENT_USER\r\n} from '../actions/currentUser'\r\n\r\nexport default (currentUser = null, action) => {\r\n  switch (action.type) {\r\n    case SET_CURRENT_USER:\r\n      return action.currentUser\r\n\r\n    case UPDATE_CURRENT_USER: {\r\n      const result = Object.assign(currentUser.user, action.currentUser)\r\n      currentUser.user = result\r\n      return { ...currentUser }\r\n    }\r\n\r\n    case RESET_CURRENT_USER:\r\n      return null\r\n\r\n    default:\r\n      return currentUser\r\n  }\r\n}","import {\r\n  FETCH_DIALOGS,\r\n  ADD_DIALOG,\r\n  SORT_DIALOGS,\r\n  UPDATE_DIALOG,\r\n  DELETE_DIALOG\r\n} from '../actions/dialogs'\r\nimport { updateDialog, sortedDialog } from './reducer-function'\r\n\r\nexport default (dialogs = [], action) => {\r\n  switch (action.type) {\r\n    case FETCH_DIALOGS:\r\n      return action.dialogs\r\n\r\n    case UPDATE_DIALOG: {\r\n      const result = updateDialog(action, dialogs)\r\n      return result\r\n    }\r\n\r\n    case ADD_DIALOG:\r\n      return [action.dialog, ...dialogs]\r\n\r\n    case SORT_DIALOGS: {\r\n      const result = sortedDialog(action, dialogs)\r\n      return result\r\n    }\r\n\r\n    case DELETE_DIALOG: {\r\n      const result = dialogs.filter(dialog => dialog.id !== action.dialogId)\r\n      return result\r\n    }\r\n\r\n    default:\r\n      return dialogs\r\n  }\r\n}","import {\r\n  SELECTED_DIALOG,\r\n  UN_SELECTED_DIALOG\r\n} from '../actions/selectedDialog'\r\n\r\nexport default (dialog = null, action) => {\r\n  switch (action.type) {\r\n    case SELECTED_DIALOG: {\r\n      return { ...action.dialog }\r\n    }\r\n\r\n    case UN_SELECTED_DIALOG: {\r\n      return {}\r\n    }\r\n\r\n    default:\r\n      return dialog\r\n  }\r\n}","export const SELECTED_DIALOG = 'SELECTED_DIALOG'\r\nexport const UN_SELECTED_DIALOG = 'UN_SELECTED_DIALOG'\r\n\r\nexport const selectedDialog = dialog => ({ type: SELECTED_DIALOG, dialog })\r\nexport const unSelectedDialog = dialog => ({ type: UN_SELECTED_DIALOG, dialog })","import {\r\n  PUSH_MESSAGE,\r\n  FETCH_MESSAGES,\r\n  DELETE_ALL_MESSAGES,\r\n  LAZY_FETCH_MESSAGES,\r\n  UPDATE_MESSAGES\r\n} from '../actions/messages'\r\n\r\nimport { lazyFetchMessages, updateStatusMessages } from './reducer-function'\r\n\r\nexport default (messages = {}, action) => {\r\n  switch (action.type) {\r\n    case FETCH_MESSAGES: {\r\n      const reverted = action.history\r\n      return { ...messages, [action.dialogId]: reverted.reverse() }\r\n    }\r\n\r\n    case LAZY_FETCH_MESSAGES: {\r\n      const result = lazyFetchMessages(action, messages)\r\n      return result\r\n    }\r\n\r\n    case UPDATE_MESSAGES: {\r\n      const mergedUpdatedMessages = updateStatusMessages(action, messages)\r\n      return mergedUpdatedMessages\r\n    }\r\n\r\n    case PUSH_MESSAGE: {\r\n      return {\r\n        ...messages,\r\n        [action.dialogId]: [...messages[action.dialogId] || [], action.message]\r\n      }\r\n    }\r\n\r\n    case DELETE_ALL_MESSAGES: {\r\n      return {\r\n        ...messages,\r\n        [action.dialogId]: []\r\n      }\r\n    }\r\n\r\n    default:\r\n      return messages\r\n  }\r\n}","import {\r\n  FETCH_USERS,\r\n} from '../actions/users'\r\n\r\nimport { fetchUsers } from './reducer-function'\r\n\r\nexport default (users = {}, action) => {\r\n  switch (action.type) {\r\n    case FETCH_USERS: {\r\n      return fetchUsers(action.users, users)\r\n    }\r\n\r\n    default: {\r\n      return users\r\n    }\r\n  }\r\n}","import { createStore } from 'redux'\r\nimport rootReducer from './reducers'\r\n\r\nconst store = createStore(rootReducer)\r\n\r\nexport default store","import { getImageLinkFromUID } from '../helpers/file'\r\n\r\nexport const STATUS_PENDING = 0\r\nexport const STATUS_SENT = 1\r\nexport const STATUS_DELIVERED = 2\r\nexport const STATUS_READ = 3\r\n\r\nexport const GROUP_CHAT_ALERT_TYPE = {\r\n  CREATE: \"create\"\r\n}\r\n\r\nconst defaultMessage = {\r\n  id: '',\r\n  body: '',\r\n  dialog_id: '',\r\n  date_sent: Math.floor(Date.now() / 1000),\r\n  attachments: null,\r\n  sender_id: null,\r\n  sender: null\r\n}\r\n\r\nexport class Message {\r\n  constructor(msg = defaultMessage, currentUser) {\r\n    this.id = msg.id || msg._id\r\n    this.body = msg.body || msg.message\r\n    this.group_chat_alert_type = msg.group_chat_alert_type || null\r\n    this.dialog_id = msg.chat_dialog_id || (msg.extension && msg.extension.dialog_id)\r\n    this.date_sent = msg.date_sent || (msg.extension && msg.extension.date_sent) || Math.floor(Date.now() / 1000)\r\n    this.send_state = Message.getSendState(msg, currentUser)\r\n    this.attachment = Message.getAttachment(msg)\r\n    this.sender_id = msg.sender_id || (msg.extension && msg.extension.sender_id)\r\n    this.sender = msg.sender_id\r\n  }\r\n\r\n  static getAttachment(msg) {\r\n    if (msg.attachments && msg.attachments.length > 0) {\r\n      const attachments = { ...msg.attachments[0] }\r\n      const parseLink = getImageLinkFromUID(msg.attachments[0].uid)\r\n      attachments.url = parseLink\r\n      return [attachments]\r\n    } else if (msg?.extension?.attachments && msg.extension.attachments.length > 0) {\r\n      const attachments = { ...msg.extension.attachments[0] }\r\n      const parseLink = getImageLinkFromUID(msg.extension.attachments[0].uid)\r\n      attachments.url = parseLink\r\n      return [attachments]\r\n    } else return null\r\n  }\r\n\r\n  static getSendState(msg, currentUser) {\r\n    if (msg?.read_ids?.find(_id => _id !== currentUser)) {\r\n      return STATUS_READ\r\n    }\r\n    if (msg?.delivered_ids?.find(msg => msg.delivered_ids !== currentUser)) {\r\n      return STATUS_DELIVERED\r\n    }\r\n    return STATUS_PENDING\r\n  }\r\n\r\n}\r\n\r\nexport class FakeMessage {\r\n  constructor(msg) {\r\n    this.attachment = msg.extension.attachments\r\n    this.body = msg.body\r\n    this.date_sent = msg.extension.date_sent\r\n    this.dialog_id = msg.extension.dialog_id\r\n    this.id = msg.id\r\n    this.send_state = 0\r\n    this.sender = undefined\r\n    this.sender_id = msg.extension.sender_id\r\n  }\r\n}","import { getImageLinkFromUID } from '../helpers/file'\r\n\r\nexport default class User {\r\n\r\n  constructor(user) {\r\n    this.id = user.id\r\n    this.avatar = User.getAvatarUrl(user.avatar)\r\n    this.login = user.login\r\n    this.custom_data = user.custom_data ? user.custom_data : ''\r\n    this.full_name = user.full_name || user.login\r\n    this.phone = user.phone\r\n    this.created_at = user.created_at\r\n    this.updated_at = user.updated_at\r\n    this.last_request_at = user.last_request_at\r\n  }\r\n  static getAvatarUrl(avatarUID) {\r\n    return getImageLinkFromUID(avatarUID)\r\n  }\r\n}\r\n","export const BTN_TYPE = {\r\n  DIALOG: 1,\r\n  CONTACTS: 2,\r\n  CREATE_GROUP: 3,\r\n}\r\n\r\nexport const DIALOG_TYPE = {\r\n  PRIVATE: 3,\r\n  GROUP: 2,\r\n  BROADCAST: 1,\r\n  PUBLIC_CHANNEL: 4\r\n}","import ConnectyCube from 'connectycube'\r\nimport Dialog from '../models/dialogs'\r\nimport {\r\n  fetchDialogs,\r\n  sortDialogs,\r\n  updateDialog,\r\n  addNewDialog,\r\n} from '../actions/dialogs'\r\nimport {\r\n  pushMessage,\r\n  fetchMessages,\r\n  lazyFetchMessages,\r\n  updateMessages,\r\n} from '../actions/messages'\r\nimport { preparationAttachment } from '../helpers/file'\r\nimport { selectedDialog } from '../actions/selectedDialog'\r\nimport { fetchUsers } from '../actions/users'\r\nimport store from '../store'\r\nimport { Message, FakeMessage } from '../models/message'\r\nimport UserModel from '../models/user'\r\nimport { DIALOG_TYPE } from '../helpers/constants'\r\nimport {\r\n  STATUS_DELIVERED,\r\n  STATUS_READ,\r\n  STATUS_SENT,\r\n  GROUP_CHAT_ALERT_TYPE\r\n} from '../models/message'\r\n\r\nclass ChatService {\r\n\r\n  setUpListeners() {\r\n    ConnectyCube.chat.onMessageListener = this.onMessageListener.bind(this)\r\n    ConnectyCube.chat.onSentMessageCallback = this.onSentMessageListener.bind(this)\r\n    ConnectyCube.chat.onDeliveredStatusListener = this.onDeliveredStatus.bind(this)\r\n    ConnectyCube.chat.onReadStatusListener = this.onReadStatus.bind(this)\r\n  }\r\n\r\n  async fetchDialogsFromServer() {\r\n    if (store.getState().dialogs.length !== 0) {\r\n      return store.getState().dialogs\r\n    }\r\n    const dialogsFromServer = await ConnectyCube.chat.dialog.list()\r\n    const currentUserId = this.currentUser\r\n    let privatChatIdsUser = []\r\n\r\n    const dialogs = dialogsFromServer.items.map(elem => {\r\n      if (elem.type === DIALOG_TYPE.PRIVATE) {\r\n        elem.occupants_ids.forEach(elem => {\r\n          elem !== currentUserId.id && privatChatIdsUser.push(elem)\r\n        })\r\n      }\r\n      return new Dialog(elem)\r\n    })\r\n\r\n    if (privatChatIdsUser.length !== 0) {\r\n      const usersInfo = await this.getUsersList(privatChatIdsUser)\r\n      store.dispatch(fetchUsers(usersInfo))\r\n    }\r\n\r\n    store.dispatch(fetchDialogs(dialogs))\r\n    return store.getState().dialogs\r\n  }\r\n\r\n  async getMessages(dialog) {\r\n    const isAlredyUpdate = this.getMessagesByDialogId(dialog.id)\r\n    let amountMessages = null\r\n\r\n    // If the first entry into the chat\r\n    if (!dialog.isAlreadyMessageFetch || dialog.unread_messages_count > 0 && !dialog.isAlreadyMessageFetch) {\r\n      const historyFromServer = await ConnectyCube.chat.message.list({\r\n        chat_dialog_id: dialog.id,\r\n        sort_desc: 'date_sent'\r\n      })\r\n\r\n      const messages = []\r\n      historyFromServer.items.forEach(elem => {\r\n        if (!elem.group_chat_alert_type) {\r\n          messages.push(new Message(elem, this.currentUser.id))\r\n        }\r\n      })\r\n\r\n      const newObj = Object.assign(dialog, { isAlreadyMessageFetch: true })\r\n      this.updateDialogsUnreadMessagesCount(newObj)\r\n      store.dispatch(fetchMessages(dialog.id, messages))\r\n      amountMessages = messages.length\r\n    } else {\r\n      // If the second entry into the chat\r\n      if (dialog.unread_messages_count > 0) {\r\n        const messages = this.getMessagesByDialogId(dialog.id)\r\n        const firstUnreadMsg = messages[dialog.unread_messages_count - 1]\r\n        this.readAllMessages(dialog.id)\r\n        await this.sendReadStatus(firstUnreadMsg.id, firstUnreadMsg.sender_id, firstUnreadMsg.dialog_id)\r\n        this.updateDialogsUnreadMessagesCount(dialog)\r\n      }\r\n      amountMessages = isAlredyUpdate.length\r\n    }\r\n    return amountMessages\r\n  }\r\n\r\n  // Message loading if more than 100\r\n  getMoreMessages = async (dialog) => {\r\n    const currentMessages = this.getMessagesByDialogId(dialog.id)\r\n    const lastMessageDate = currentMessages[0]\r\n    const updateObj = Object.assign(dialog, { last_messages_for_fetch: lastMessageDate.date_sent })\r\n\r\n    const filter = {\r\n      chat_dialog_id: dialog.id,\r\n      date_sent: { lt: lastMessageDate.date_sent },\r\n      sort_desc: 'date_sent'\r\n    }\r\n\r\n    const moreHistoryFromServer = await ConnectyCube.chat.message.list(filter)\r\n\r\n    const messages = []\r\n    moreHistoryFromServer.items.forEach(elem => {\r\n      if (!elem.group_chat_alert_type) {\r\n        messages.push(new Message(elem, this.currentUser.id))\r\n      }\r\n    })\r\n\r\n    store.dispatch(updateDialog(updateObj))\r\n    const amountMessages = store.dispatch(lazyFetchMessages(dialog.id, messages))\r\n    return amountMessages.history.length\r\n  }\r\n\r\n\r\n  async sendMessage(dialog, messageText, attachments = false, scrollToBottom) {\r\n    const user = this.currentUser\r\n    const text = messageText.trim()\r\n    const date = Math.floor(Date.now() / 1000)\r\n    const recipient_id = dialog.type === DIALOG_TYPE.PRIVATE ? dialog.occupants_ids.find(elem => elem != user.id)\r\n      : dialog.xmpp_room_jid\r\n\r\n    let msg = {\r\n      type: dialog.xmpp_type,\r\n      body: text,\r\n      extension: {\r\n        save_to_history: 1,\r\n        dialog_id: dialog.id,\r\n        sender_id: user.id,\r\n        date_sent: date,\r\n      },\r\n      // markable: 1\r\n    }\r\n\r\n    msg.id = this.messageUniqueId\r\n\r\n    // If send message as Attachment\r\n    if (attachments) {\r\n      return this.sendMessageAsAttachment(dialog, recipient_id, msg, attachments, scrollToBottom)\r\n    }\r\n\r\n    const message = new FakeMessage(msg)\r\n\r\n    const newObjFreez = Object.freeze(message)\r\n\r\n    await store.dispatch(pushMessage(newObjFreez, dialog.id))\r\n    scrollToBottom()\r\n    ConnectyCube.chat.send(recipient_id, msg)\r\n    store.dispatch(sortDialogs(newObjFreez))\r\n  }\r\n\r\n\r\n  sendMsgChatAlertOnCreate = async (dialog, message, alertType) => {\r\n    const date = Math.floor(Date.now() / 1000)\r\n    const recipient_id = dialog.type === DIALOG_TYPE.PRIVATE ? dialog.occupants_ids.find(elem => elem != this.currentUser.id)\r\n      : dialog.xmpp_room_jid\r\n    const messageExtensions = {\r\n      date_sent: date,\r\n      save_to_history: 1,\r\n      dialog_id: dialog.id,\r\n      group_chat_alert_type: alertType,\r\n      sender_id: this.currentUser.id,\r\n    }\r\n    const msg = {\r\n      type: !dialog.xmpp_room_jid ? 'chat' : 'groupchat',\r\n      body: message,\r\n      extension: messageExtensions,\r\n    }\r\n    ConnectyCube.chat.send(recipient_id, msg)\r\n  }\r\n\r\n  sendChatAlertOnCreate(dialog) {\r\n    const message = 'Group is created'\r\n    this.sendMsgChatAlertOnCreate(dialog, message, GROUP_CHAT_ALERT_TYPE.CREATE)\r\n  }\r\n\r\n  async sendMessageAsAttachment(dialog, recipient_id, msg, attachments, scrollToBottom) {\r\n    //create fake data for render img\r\n    const url = URL.createObjectURL(attachments.file)\r\n    msg.extension.attachments = [{ url }]\r\n    msg.body = 'Image attachment'\r\n    const message = new FakeMessage(msg)\r\n    await store.dispatch(pushMessage(message, dialog.id))\r\n    scrollToBottom()\r\n\r\n    // create real data for attachment\r\n    const response = await this.uploadPhoto(attachments)\r\n    const newObjAttach = preparationAttachment(response)\r\n    msg.extension.attachments = [newObjAttach]\r\n    await ConnectyCube.chat.send(recipient_id, msg)\r\n    store.dispatch(sortDialogs(message))\r\n    return\r\n  }\r\n\r\n  async createPrivateDialog(userId) {\r\n    const dialogs = store.getState().dialogs\r\n    let dialog = null\r\n\r\n    dialogs.forEach(elem => {\r\n      if (elem.type === DIALOG_TYPE.PRIVATE && elem.occupants_ids.find(elem => elem === userId)) {\r\n        dialog = elem\r\n      }\r\n    })\r\n\r\n    if (!dialog) {\r\n      const params = {\r\n        type: DIALOG_TYPE.PRIVATE,\r\n        occupants_ids: userId,\r\n      }\r\n\r\n      const response = await ConnectyCube.chat.dialog.create(params)\r\n      dialog = new Dialog(response)\r\n      if (this.getUserFromReduxById(userId)) {\r\n        store.dispatch(addNewDialog(dialog))\r\n        return dialog\r\n      } else {\r\n        const usersInfo = await this.getUserFromServerById(userId)\r\n        usersInfo.user = new UserModel(usersInfo.user)\r\n        store.dispatch(fetchUsers([usersInfo.user]))\r\n        store.dispatch(addNewDialog(dialog))\r\n        return dialog\r\n      }\r\n    }\r\n\r\n    // If the user is already in the Redux\r\n    if (this.getUserFromReduxById(userId)) {\r\n      return dialog\r\n    } else {\r\n      const usersInfo = await this.getUserFromServerById(userId)\r\n      usersInfo.user = new UserModel(usersInfo.user)\r\n      store.dispatch(fetchUsers([usersInfo.user]))\r\n      return dialog\r\n    }\r\n  }\r\n\r\n\r\n  updateDialogsUnreadMessagesCount = (dialog) => {\r\n    const updateObj = Object.assign(dialog, { unread_messages_count: 0 })\r\n    store.dispatch(updateDialog(updateObj))\r\n    return true\r\n  }\r\n\r\n  async createPublicDialog(occupants_ids, groupName, img) {\r\n    const currentUser = this.currentUser\r\n    occupants_ids.unshift(currentUser.id)\r\n    const params = {\r\n      type: DIALOG_TYPE.GROUP,\r\n      occupants_ids,\r\n      name: groupName,\r\n    }\r\n    const image = img ? await this.uploadPhoto(img) : null\r\n    if (image) {\r\n      params.photo = image.uid\r\n    }\r\n    const dialog = await ConnectyCube.chat.dialog.create(params)\r\n    const newDialog = new Dialog(dialog)\r\n    store.dispatch(addNewDialog(newDialog))\r\n    return newDialog\r\n  }\r\n\r\n  async readAllMessages(dialogId) {\r\n    return ConnectyCube.chat.message.update(null, {\r\n      chat_dialog_id: dialogId,\r\n      read: 1\r\n    })\r\n  }\r\n\r\n  async readMessage(messageId, dialogId) {\r\n    this.onReadStatus(messageId, dialogId)\r\n    return ConnectyCube.chat.message.update(null, {\r\n      chat_dialog_id: dialogId,\r\n      read: 1\r\n    })\r\n  }\r\n\r\n  async onMessageListener(senderId, msg) {\r\n    const message = new Message(msg)\r\n    const user = this.currentUser\r\n    const dialog = this.getSelectedDialog()?.id\r\n\r\n    // If group chat alet\r\n    if (msg.extension.group_chat_alert_type) {\r\n      const dialogsFromServer = await ConnectyCube.chat.dialog.list()\r\n      const dialogs = dialogsFromServer.items.map(elem => {\r\n        return new Dialog(elem)\r\n      })\r\n      store.dispatch(fetchDialogs(dialogs))\r\n      return\r\n    }\r\n\r\n    if (senderId !== user.id) {\r\n      if (dialog === message.dialog_id) {\r\n        store.dispatch(sortDialogs(message))\r\n        this.readMessage(message.id, message.dialog_id)\r\n        this.sendReadStatus(msg.extension.message_id, msg.extension.sender_id, msg.dialog_id)\r\n      } else {\r\n        this.sendDeliveredStatus(msg.extension.message_id, msg.extension.sender_id, msg.dialog_id)\r\n        store.dispatch(sortDialogs(message, true))\r\n      }\r\n      store.dispatch(pushMessage(message, message.dialog_id))\r\n    }\r\n  }\r\n\r\n  // ConnectyCube listeners\r\n  onSentMessageListener(failedMessage, msg) {\r\n    console.warn('onSentMessageListener')\r\n    if (failedMessage || msg.extension.group_chat_alert_type) {\r\n      return\r\n    }\r\n    store.dispatch(updateMessages(msg.extension.dialog_id, msg.id, { send_state: STATUS_SENT }))\r\n  }\r\n\r\n  onDeliveredStatus(messageId, dialogId, userId) {\r\n    console.warn('onDeliveredStatus', messageId)\r\n    store.dispatch(updateMessages(dialogId, messageId, { send_state: STATUS_DELIVERED }))\r\n  }\r\n\r\n  onReadStatus(messageId, dialogId, userId) {\r\n    console.warn('onReadStatus', messageId)\r\n    store.dispatch(updateMessages(dialogId, messageId, { send_state: STATUS_READ }))\r\n  }\r\n\r\n\r\n\r\n  sendReadStatus(messageId, userId, dialogId) {\r\n    ConnectyCube.chat.sendReadStatus({ messageId, userId, dialogId })\r\n  }\r\n\r\n  sendDeliveredStatus(messageId, userId, dialogId) {\r\n    ConnectyCube.chat.sendDeliveredStatus({ messageId, userId, dialogId })\r\n  }\r\n\r\n  async getUsersList(ids) {\r\n    const usersList = await ConnectyCube.users.get({\r\n      per_page: 100,\r\n      filter: {\r\n        field: 'id', param: 'in', value: ids,\r\n      },\r\n    })\r\n\r\n    return usersList.items.map(elem => {\r\n      return new UserModel(elem.user)\r\n    })\r\n  }\r\n\r\n  async getUserFromServerById(id) {\r\n    return ConnectyCube.users.get(id)\r\n  }\r\n\r\n  setSelectDialog(dialog) {\r\n    store.dispatch(selectedDialog(dialog))\r\n  }\r\n\r\n  getSelectedDialog() {\r\n    return store.getState().selectedDialog\r\n  }\r\n\r\n  getDialogById(dialogId) {\r\n    return store.getState().dialogs.find(elem => elem.id === dialogId)\r\n  }\r\n\r\n  getMessagesByDialogId(dialogId) {\r\n    const result = store.getState().messages\r\n    return result[dialogId]\r\n  }\r\n\r\n  async uploadPhoto(file) {\r\n    return ConnectyCube.storage.createAndUpload(file)\r\n  }\r\n\r\n  get currentUser() {\r\n    return store.getState().currentUser.user\r\n  }\r\n\r\n  getUserFromReduxById(id) {\r\n    return store.getState().users[id]\r\n  }\r\n\r\n  get messageUniqueId() {\r\n    return ConnectyCube.chat.helpers.getBsonObjectId()\r\n  }\r\n}\r\n\r\n\r\nconst chatService = new ChatService()\r\n\r\nObject.freeze(chatService)\r\n\r\nexport default chatService\r\n\r\n","import ConnectyCube from 'connectycube'\r\nimport appConfig from '../appConfig.json'\r\nimport User from '../models/user'\r\nimport store from '../store'\r\nimport { setCurrentUser } from '../actions/currentUser'\r\nimport { getImageLinkFromUID } from '../helpers/file'\r\nimport { LogOut } from '../reducers/index'\r\n\r\nclass AuthService {\r\n  static CURRENT_USER_SESSION_KEY = 'CURRENT_USER_SESSION_KEY'\r\n  static DEVICE_TOKEN_KEY = 'DEVICE_TOKEN_KEY'\r\n\r\n  async init() {\r\n    await ConnectyCube.init(...appConfig.connectyCubeConfig)\r\n    return this.autologin()\r\n  }\r\n\r\n  async autologin() {\r\n    const checkUserSessionFromStore = await this.getUserSession()\r\n    if (checkUserSessionFromStore) {\r\n      const data = JSON.parse(checkUserSessionFromStore)\r\n      await this.signIn({ login: data.login, password: data.password })\r\n      return 'home'\r\n    } else { return 'auth' }\r\n  }\r\n\r\n  async signIn(params) {\r\n    const session = await ConnectyCube.createSession(params)\r\n    const currentUser = new User(session.user)\r\n    session.user.avatar = getImageLinkFromUID(session.user.avatar)\r\n    // work around\r\n    session.user.full_name = session.user.login\r\n    store.dispatch(setCurrentUser(session))\r\n    const customSession = Object.assign({}, currentUser, { password: params.password })\r\n    this.setUserSession(customSession)\r\n    this.connect(customSession.id, customSession.password)\r\n  }\r\n\r\n  async signUp(params) {\r\n    await ConnectyCube.createSession()\r\n    await ConnectyCube.users.signup(params)\r\n    return this.signIn(params)\r\n  }\r\n\r\n  async connect(userId, password) {\r\n    await ConnectyCube.chat.connect({ userId, password })\r\n  }\r\n\r\n  setUserSession(userSession) {\r\n    return localStorage.setItem(AuthService.CURRENT_USER_SESSION_KEY, JSON.stringify(userSession))\r\n  }\r\n\r\n  getUserSession() {\r\n    return localStorage.getItem(AuthService.CURRENT_USER_SESSION_KEY)\r\n  }\r\n\r\n  async logout() {\r\n    localStorage.clear()\r\n    await ConnectyCube.logout()\r\n    store.dispatch(LogOut())\r\n  }\r\n\r\n\r\n}\r\n\r\nconst authService = new AuthService()\r\n\r\nObject.freeze(authService)\r\n\r\nexport default authService","import React, { Component } from 'react'\r\nimport './loader.css'\r\n\r\nexport default class Loader extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container-loader\">\r\n        <div className=\"loader\"></div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport AuthService from '../../services/auth-service'\r\nimport logo from '../../assets/logo_with_text.png'\r\nimport swal from 'sweetalert'\r\nimport './auth.css'\r\nimport Loader from '../../helpers/loader/loader'\r\nimport { Redirect } from \"react-router-dom\"\r\n\r\n\r\nexport default class Auth extends Component {\r\n  state = {\r\n    isLogin: true,\r\n    isLoader: false,\r\n    full_name: '',\r\n    login: '',\r\n    password: '',\r\n    isAuthorization: false\r\n  }\r\n\r\n  handleStateModal = () => {\r\n    return this.setState(\r\n      { isLogin: !this.state.isLogin }\r\n    )\r\n  }\r\n\r\n  changeName = (event) => (this.setState({ full_name: event.target.value }))\r\n\r\n  changeLogin = (event) => (this.setState({ login: event.target.value }))\r\n\r\n  changePassword = (event) => (this.setState({ password: event.target.value }))\r\n\r\n  login = (e) => {\r\n    e.preventDefault()\r\n    const { login, password, full_name, isLogin } = this.state\r\n    const dataUser = { login, password }\r\n\r\n    if (!login.trim() || !password.trim() || !isLogin && !full_name.trim()) {\r\n      const endMessage = isLogin ? 'login.' : 'sign up'\r\n      swal('Warning', `Fill the fields to ${endMessage}`)\r\n      return\r\n    }\r\n\r\n    this.setState({ isLoader: true })\r\n\r\n    if (isLogin) {\r\n      AuthService.signIn(dataUser)\r\n        .then(() => {\r\n          this.setState({ isLoader: false, isAuthorization: true })\r\n        })\r\n        .catch(error => {\r\n          this.setState({ isLoader: false })\r\n          swal(`Error.\\n\\n${JSON.stringify(error)}`, \"\", \"error\")\r\n        })\r\n    } else {\r\n      dataUser.full_name = full_name\r\n      AuthService.signUp(dataUser)\r\n        .then(() => {\r\n          this.setState({ isLoader: false, isAuthorization: true })\r\n          swal(\"Account successfully registered!\", \"\", \"success\")\r\n        })\r\n        .catch(error => {\r\n          this.setState({ isLoader: false })\r\n          swal(`Error.\\n\\n${JSON.stringify(error)}`, \"\", \"error\")\r\n        }\r\n        )\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n    const { isLogin, login, password, isLoader, isAuthorization, full_name } = this.state\r\n    const authText = isLogin ? \"Don't have an account?\" : 'Already have an account?'\r\n    const authLink = isLogin ? 'Sign up' : 'Sign in'\r\n\r\n    return (\r\n      <div className=\"auth-main-сontainer\" style={this.props.isSmallDevice && { backgroundColor: '#27ae60' }}>\r\n        <div className=\"auth-modal-container\" style={isLogin ? { height: '500px' } : { height: '570px' }}>\r\n          {isLoader &&\r\n            <div className=\"auth-wrapp-loader\">\r\n              <Loader />\r\n            </div>\r\n          }\r\n          {isAuthorization &&\r\n            <Redirect to=\"/home\" />\r\n          }\r\n          <div className=\"auth-logo\">\r\n            <img src={logo} alt=\"Logo\" />\r\n          </div>\r\n          <form onSubmit={this.login} className=\"auth-form auth-wrapper\">\r\n            {!isLogin &&\r\n              <input\r\n                type=\"text\"\r\n                value={full_name}\r\n                onChange={this.changeName}\r\n                required\r\n                placeholder=\"Name\"\r\n                name=\"Name\"\r\n              />\r\n            }\r\n            <input\r\n              type=\"text\"\r\n              value={login}\r\n              onChange={this.changeLogin}\r\n              required\r\n              placeholder=\"Login\"\r\n              name=\"login\" />\r\n            <input\r\n              type=\"password\"\r\n              value={password}\r\n              onChange={this.changePassword}\r\n              required\r\n              placeholder=\"Password\"\r\n              name=\"Password\" />\r\n            <button type=\"submit\" value=\"Submit\">{isLogin ? 'Log in' : 'Sign up'}</button>\r\n          </form>\r\n          <div className=\"auth-footer\">\r\n            <span>{authText}</span>\r\n            {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\r\n            <a onClick={this.handleStateModal}>{authLink}</a>\r\n          </div>\r\n        </div>\r\n      </div >\r\n    )\r\n  }\r\n}\r\n\r\n","import React from 'react'\r\nimport './avatar.css'\r\n\r\nexport default function Avatar({ photo, name, size }) {\r\n  function randomizeColor() {\r\n    const colors = [\r\n      'blue',\r\n      'darkmagenta',\r\n      'fuchsia',\r\n      'gold',\r\n      'green',\r\n      'limegreen',\r\n      'navy',\r\n      'purple',\r\n      'red',\r\n      'skyblue'\r\n    ]\r\n\r\n    return colors[name.length % colors.length]\r\n  }\r\n\r\n  function getIconLabel() {\r\n    const words = name.split(' ')\r\n    return words.length > 1\r\n      ? `${words[0].slice(0, 1)}${words[1].slice(0, 1)}`\r\n      : name.slice(0, 2)\r\n  }\r\n\r\n  return (\r\n    photo ?\r\n      <div style={{ width: size, height: size }}>\r\n        <div style={{\r\n          width: size || '100%',\r\n          height: size || '100%',\r\n          borderRadius: '50%',\r\n          backgroundImage: `url(${photo})`,\r\n          backgroundPosition: 'center',\r\n          backgroundSize: 'cover',\r\n          backgroundRepeat: 'no-repeat'\r\n        }}>\r\n        </div>\r\n      </div> :\r\n      <div style={{ width: size, height: size }}>\r\n        <div className=\"avatar-as-icon\" style={{ backgroundColor: randomizeColor() }}>\r\n          <p style={{ fontSize: size / 2.4 }}>{getIconLabel().toUpperCase()}</p>\r\n        </div>\r\n      </div >\r\n  )\r\n}\r\n","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faChevronDown } from '@fortawesome/free-solid-svg-icons'\r\nimport { faChevronUp } from '@fortawesome/free-solid-svg-icons'\r\nimport { connect } from 'react-redux'\r\nimport './userProfile.css'\r\nimport AuthService from '../../../../services/auth-service'\r\nimport Modal from 'react-modal'\r\nimport { Link } from \"react-router-dom\"\r\nimport Avatar from '../../../../helpers/avatar/avatar'\r\n\r\n\r\nclass UserProfile extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      isModal: false\r\n    }\r\n  }\r\n\r\n  customStyles = {\r\n    content: {\r\n      top: '50%',\r\n      left: '50%',\r\n      right: 'auto',\r\n      bottom: 'auto',\r\n      transform: 'translate(-50%, -50%)',\r\n      border: 'none',\r\n      padding: 0,\r\n    }\r\n  }\r\n\r\n  showMoreInformation = () => {\r\n    this.setState({ isModal: !this.state.isModal })\r\n  }\r\n\r\n  handleCloseModal = () => (this.setState({ isModal: false }))\r\n\r\n  logOut = () => {\r\n    AuthService.logout()\r\n  }\r\n\r\n  settings = () => {\r\n    alert(\"Coming soon\")\r\n    this.handleCloseModal()\r\n  }\r\n\r\n  render() {\r\n    const { isModal } = this.state\r\n    const { currentUser } = this.props\r\n    if (!currentUser) {\r\n      return <></>\r\n    }\r\n\r\n    const { user } = currentUser\r\n    return (\r\n      <div className=\"user-rofile-container\">\r\n        <div className=\"user-profile-wrapper\">\r\n          <div className=\"user-profile-user-info\">\r\n            <div className=\"online\">\r\n              <Avatar photo={user.avatar} name={user.full_name} size={50} />\r\n            </div>\r\n            <span>{user.full_name}</span>\r\n          </div>\r\n          <div className=\"user-profile-icon\" id=\"user-profile-icon\" onClick={this.showMoreInformation}>\r\n            {isModal ?\r\n              <FontAwesomeIcon icon={faChevronUp} color={'white'} /> :\r\n              <FontAwesomeIcon icon={faChevronDown} color={'#435f7a'} />\r\n            }\r\n          </div>\r\n        </div>\r\n        {isModal &&\r\n          <>\r\n            <Modal\r\n              isOpen={isModal}\r\n              onRequestClose={this.handleCloseModal}\r\n              ariaHideApp={false}\r\n              style={this.customStyles}\r\n              overlayClassName=\"Overlay-user-profile\"\r\n            />\r\n            <div className=\"user-profile-modal\">\r\n              <ul>\r\n                <li className=\"user-profile-user-more-info\">\r\n                  <Link\r\n                    to=\"/auth\"\r\n                    onClick={this.logOut}\r\n                    className=\"reset-user-profile\">Logout</Link>\r\n                </li>\r\n                <li className=\"user-profile-user-more-info\">\r\n                  <Link\r\n                    to=\"/home\"\r\n                    onClick={this.settings}\r\n                    className=\"reset-user-profile\">Settings</Link>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = ({ currentUser }) => ({\r\n  currentUser\r\n})\r\n\r\nexport default connect(mapStateToProps)(UserProfile)\r\n","import { LayoutProvider } from \"recyclerlistview/web\"\r\nimport store from '../store'\r\n\r\nexport class DialogLayoutUtil {\r\n  static getDialogLayoutProvider(width) {\r\n    return new LayoutProvider(\r\n      () => {\r\n        return \"type\";\r\n      },\r\n      (type, dim) => {\r\n        dim.width = width;\r\n        dim.height = 75;\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport class ChatLayoutUtil {\r\n  static getChatLayoutProvider(props) {\r\n    const { width, dialogId, currentUserId } = props\r\n    const fontSize = 16\r\n    const lineHeight = 1.5\r\n    const delta = 20\r\n    const margin = 30\r\n    const maxWidth = new GetMaxWidthMsg(width)\r\n    let footer = 15\r\n\r\n    return new LayoutProvider(\r\n      (arr) => {\r\n        return arr;\r\n      },\r\n      (type, dim, index) => {\r\n        if (store.getState().messages[dialogId][index].attachment) {\r\n          // if send messages as attachment\r\n          dim.width = width\r\n          dim.height = 300\r\n          return\r\n        } else {\r\n          // if send messages as string\r\n          let maxWidthMsg\r\n          if (store.getState().messages[dialogId][index].sender_id === currentUserId) {\r\n            maxWidthMsg = maxWidth.currentSender\r\n          } else {\r\n            maxWidthMsg = maxWidth.otherSender\r\n          }\r\n\r\n          var fakeElem = document.createElement(\"canvas\")\r\n          var ctx = fakeElem.getContext(\"2d\")\r\n          ctx.font = `${fontSize}px 'Open Sans', sans-serif`\r\n          var txt = store.getState().messages[dialogId][index].body\r\n\r\n          const calcWidth = ctx.measureText(txt).width\r\n          const lines = Math.ceil(calcWidth / (maxWidthMsg - delta))\r\n\r\n          dim.width = width\r\n          dim.height = lines * lineHeight * fontSize + margin + footer\r\n        }\r\n      }\r\n    )\r\n  }\r\n}\r\n\r\nexport class GetMaxWidthMsg {\r\n  constructor(maxScrollWidth) {\r\n    if (maxScrollWidth < 550) {\r\n      this.currentSender = 300\r\n      this.otherSender = 250\r\n    }\r\n    if (maxScrollWidth > 550 && maxScrollWidth < 768) {\r\n      this.currentSender = 420\r\n      this.otherSender = 470\r\n    }\r\n    if (maxScrollWidth > 768 && maxScrollWidth < 960) {\r\n      this.currentSender = 450\r\n      this.otherSender = 500\r\n    }\r\n    if (maxScrollWidth > 960) {\r\n      this.currentSender = 650\r\n      this.otherSender = 600\r\n    }\r\n  }\r\n}","export default function lastDate({ lastDate, lastMessage, updatedDate }) {\r\n  const monthes = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\r\n  const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\n  const msgLastDate = lastMessage ? new Date(lastDate * 1000) : new Date(updatedDate)\r\n  const msgYear = msgLastDate.getFullYear()\r\n  const msgMonth = msgLastDate.getMonth()\r\n  const msgDate = msgLastDate.getDate()\r\n  const msgDay = msgLastDate.getDay()\r\n  const msgHours = msgLastDate.getHours()\r\n  const msgMinutes = msgLastDate.getMinutes()\r\n  const LastDate = new Date()\r\n  const curYear = LastDate.getFullYear()\r\n  const curMonth = LastDate.getMonth()\r\n  const curDate = LastDate.getDate()\r\n  const curDay = LastDate.getDay()\r\n\r\n  if (curYear > msgYear) {\r\n    return `${monthes[msgMonth]} ${msgDate}, ${msgYear}`\r\n  } else if (curMonth > msgMonth) {\r\n    return `${monthes[msgMonth]} ${msgDate}`\r\n  } else if (curDate > (msgDate + 6)) {\r\n    return `${monthes[msgMonth]} ${msgDate}`\r\n  } else if (curDay > msgDay) {\r\n    return `${days[msgDay]}`\r\n  } else {\r\n    return `${(msgHours > 9) ? msgHours : ('0' + msgHours)}:${(msgMinutes > 9) ? msgMinutes : ('0' + msgMinutes)}`\r\n  }\r\n}\r\n\r\nexport function getTime(dateSent) {\r\n  const date = dateSent ? new Date(dateSent * 1000) : new Date()\r\n  const hours = date.getHours()\r\n  const minutes = date.getMinutes()\r\n  return `${(hours > 9) ? hours : ('0' + hours)}:${(minutes > 9) ? minutes : ('0' + minutes)}`\r\n}","import React, { Component } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faUserPlus } from '@fortawesome/free-solid-svg-icons'\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\r\nimport { RecyclerListView, DataProvider } from \"recyclerlistview/web\"\r\nimport { connect } from 'react-redux'\r\nimport { DialogLayoutUtil } from '../../../../helpers/LayoutUtil'\r\nimport ChatService from '../../../../services/chat-service'\r\nimport Loader from '../../../../helpers/loader/loader'\r\nimport lastDate from '../../../../helpers/lastDate'\r\nimport Avatar from '../../../../helpers/avatar/avatar'\r\nimport './dialogs.css'\r\n\r\n\r\nclass Dialog extends Component {\r\n  scrollWidth = 0\r\n  scrollHeight = 0\r\n  listenerWindowSize = null\r\n  timer = null\r\n  allDialog = []\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      isAlredy: false,\r\n      dataProvider: new DataProvider((r1, r2) => {\r\n        return r1 !== r2 || r1.unread_messages_count !== r2.unread_messages_count;\r\n      }),\r\n      layoutProvider: 0,\r\n      count: 20,\r\n      isLoader: true,\r\n      search: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('resize', this.handleResize)\r\n    this.scrollWidth = document.getElementById('dialog-info-container').clientWidth\r\n    this.scrollHeight = document.getElementById('dialog-info-container').clientHeight\r\n\r\n    ChatService.fetchDialogsFromServer().then((dialogs) => {\r\n      this.allDialog = dialogs\r\n      this.setState({\r\n        isAlredy: true,\r\n        isLoader: false,\r\n        layoutProvider: DialogLayoutUtil.getDialogLayoutProvider(this.scrollWidth),\r\n        dataProvider: this.state.dataProvider.cloneWithRows(dialogs),\r\n      })\r\n    })\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { dialogs } = this.props\r\n    if (this.props.dialogs !== prevProps.dialogs\r\n    ) {\r\n      this.allDialog = dialogs\r\n      this.setState({\r\n        layoutProvider: DialogLayoutUtil.getDialogLayoutProvider(this.scrollWidth),\r\n        dataProvider: this.state.dataProvider.cloneWithRows(dialogs),\r\n      })\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.handleResize)\r\n  }\r\n\r\n  handleResize = () => {\r\n    this.scrollWidth = document.getElementById('dialog-info-container').clientWidth\r\n    this.scrollHeight = document.getElementById('dialog-info-container').clientHeight\r\n    if (!this.timer) {\r\n      this.timer = setTimeout(() => {\r\n        clearTimeout(this.timer)\r\n        this.timer = null\r\n        this.setState({\r\n          isAlredy: true,\r\n          layoutProvider: DialogLayoutUtil.getDialogLayoutProvider(this.scrollWidth)\r\n        })\r\n      }, 500)\r\n    }\r\n  }\r\n\r\n  changeSearch = (event) => {\r\n    let dialogs = []\r\n    if (event.target.value === '') {\r\n      dialogs = this.allDialog\r\n    } else {\r\n      this.allDialog.forEach(elem => {\r\n        const str = elem.name.toUpperCase().includes(event.target.value.toUpperCase())\r\n        str && dialogs.push(elem)\r\n      })\r\n    }\r\n    this.setState({\r\n      search: event.target.value,\r\n      dataProvider: this.state.dataProvider.cloneWithRows(dialogs)\r\n    })\r\n  }\r\n\r\n  goToChat = (item) => {\r\n    const { router } = this.props\r\n    ChatService.setSelectDialog(item)\r\n    router('/home/chat')\r\n  }\r\n\r\n  createNewDialog = () => {\r\n    const { router } = this.props\r\n    router('/home/create-dialog')\r\n  }\r\n\r\n  _renderDialog = (type, item) => {\r\n    return (\r\n      <li onClick={() => this.goToChat(item)}>\r\n        <div className=\"dialog-wrap-avatar\">\r\n          <Avatar photo={item.photo} name={item.name} size={50} />\r\n        </div>\r\n        <div className=\"dialog-wrap-block\">\r\n          <div className=\"dialog-wrap-block-left\">\r\n            <h5>{item.name}</h5>\r\n            <span>{item.last_message === '' ? \"No messages yet\" : item.last_message}</span>\r\n          </div>\r\n          <div className=\"dialog-wrap-block-right\">\r\n            <p>{lastDate({\r\n              lastDate: item.last_message_date_sent,\r\n              lastMessage: item.last_message,\r\n              updatedDate: item.updated_date,\r\n            })}</p>\r\n            {item.unread_messages_count > 0 &&\r\n              <span>{item.unread_messages_count}</span>\r\n            }\r\n          </div>\r\n        </div>\r\n      </li>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const { isLoader, dataProvider, layoutProvider, search } = this.state\r\n    return (\r\n      <div className=\"dialog-container\" >\r\n        <button onClick={this.createNewDialog}>\r\n          <FontAwesomeIcon icon={faUserPlus} color={'#d2d2d2'} />\r\n          <span>New chat</span>\r\n        </button>\r\n        <div className=\"dialog-input-search\">\r\n          <div className=\"dialog-input-search-icon\">\r\n            <FontAwesomeIcon icon={faSearch} color={'#d2d2d2'} />\r\n          </div>\r\n          <input\r\n            className=\"input-field\"\r\n            type=\"text\"\r\n            value={search}\r\n            onChange={this.changeSearch}\r\n            required\r\n            placeholder=\"Search chats...\"\r\n            name=\"search\" />\r\n        </div>\r\n        <div className=\"dialog-info-container\" id=\"dialog-info-container\">\r\n          {isLoader ?\r\n            (\r\n              <div style={{ position: 'absolute', width: '100%', height: '100%' }}>\r\n                <Loader />\r\n              </div>\r\n            ) : dataProvider.length === 0 ?\r\n              <div className=\"dialog-no-chats\">\r\n                <h3>No chats yet</h3>\r\n              </div> : this.state.isAlredy ?\r\n                dataProvider._data.length > 0 ?\r\n                  <ul>\r\n                    {\r\n                      <RecyclerListView\r\n                        style={{ width: this.scrollWidth, height: this.scrollHeight }}\r\n                        dataProvider={dataProvider}\r\n                        layoutProvider={layoutProvider}\r\n                        rowRenderer={this._renderDialog}\r\n                      />\r\n                    }\r\n                  </ul> : <div className=\"dialog-no-chats\">\r\n                    <h3>No results</h3>\r\n                  </div> : null\r\n          }\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ dialogs }) => ({\r\n  dialogs\r\n})\r\n\r\nexport default connect(mapStateToProps)(Dialog)","import React, { Component } from 'react'\r\nimport UserProfile from './userProfile/userProfile'\r\nimport Dialogs from './dialogs/dialogs'\r\nimport './sideBar.css'\r\n\r\nexport default class SideBar extends Component {\r\n  render() {\r\n    const { router } = this.props\r\n    return (\r\n      <div className=\"sidebar-container\">\r\n        <UserProfile />\r\n        <Dialogs router={router} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n","const createImage = url =>\r\n  new Promise((resolve, reject) => {\r\n    const image = new Image()\r\n    image.addEventListener('load', () => resolve(image))\r\n    image.addEventListener('error', error => reject(error))\r\n    image.setAttribute('crossOrigin', 'anonymous') // needed to avoid cross-origin issues on CodeSandbox\r\n    image.src = url\r\n  })\r\n\r\nfunction getRadianAngle(degreeValue) {\r\n  return (degreeValue * Math.PI) / 180\r\n}\r\n\r\n/**\r\n * This function was adapted from the one in the ReadMe of https://github.com/DominicTobias/react-image-crop\r\n * @param {File} image - Image File url\r\n * @param {Object} pixelCrop - pixelCrop Object provided by react-easy-crop\r\n * @param {number} rotation - optional rotation parameter\r\n */\r\nexport default async function getCroppedImg(imageSrc, pixelCrop, rotation = 0) {\r\n  const image = await createImage(imageSrc)\r\n  const canvas = document.createElement('canvas')\r\n  const ctx = canvas.getContext('2d')\r\n\r\n  const maxSize = Math.max(image.width, image.height)\r\n  const safeArea = 2 * ((maxSize / 2) * Math.sqrt(2))\r\n\r\n  // set each dimensions to double largest dimension to allow for a safe area for the\r\n  // image to rotate in without being clipped by canvas context\r\n  canvas.width = safeArea\r\n  canvas.height = safeArea\r\n\r\n  // translate canvas context to a central location on image to allow rotating around the center.\r\n  ctx.translate(safeArea / 2, safeArea / 2)\r\n  ctx.rotate(getRadianAngle(rotation))\r\n  ctx.translate(-safeArea / 2, -safeArea / 2)\r\n\r\n  // draw rotated image and store data.\r\n  ctx.drawImage(\r\n    image,\r\n    safeArea / 2 - image.width * 0.5,\r\n    safeArea / 2 - image.height * 0.5\r\n  )\r\n  const data = ctx.getImageData(0, 0, safeArea, safeArea)\r\n\r\n  // set canvas width to final desired crop size - this will clear existing context\r\n\r\n  // canvas.width = pixelCrop.width\r\n  // canvas.height = pixelCrop.height\r\n\r\n  // custom width and height\r\n  canvas.width = 400\r\n  canvas.height = 400\r\n\r\n\r\n  // paste generated rotate image with correct offsets for x,y crop values.\r\n  ctx.putImageData(\r\n    data,\r\n    0 - safeArea / 2 + image.width * 0.5 - pixelCrop.x,\r\n    0 - safeArea / 2 + image.height * 0.5 - pixelCrop.y\r\n  )\r\n\r\n  // As Base64 string\r\n  // return canvas.toDataURL('image/jpeg');\r\n\r\n\r\n  return new Promise(resolve => {\r\n    canvas.toBlob(file => {\r\n      const newFile = new File([file], \"filename.jpg\", { type: 'image/jpeg' })\r\n      const imageInfo = {\r\n        file: {\r\n          size: file.size,\r\n          type: file.type,\r\n          file: newFile,\r\n          name: 'samo-name.jpg',\r\n          public: false\r\n        },\r\n        link: {\r\n          url: URL.createObjectURL(file)\r\n        }\r\n      }\r\n      resolve(imageInfo)\r\n    }, 'image/jpeg')\r\n  })\r\n}\r\n","import React, { Component } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCamera } from '@fortawesome/free-solid-svg-icons'\r\nimport { faPaperclip } from '@fortawesome/free-solid-svg-icons'\r\nimport Modal from 'react-modal'\r\nimport Cropper from 'react-easy-crop'\r\nimport getCroppedImg from './cropImage'\r\nimport './imagePicker.css'\r\n\r\nconst customStyles = {\r\n  content: {\r\n    top: '50%',\r\n    left: '50%',\r\n    right: 'auto',\r\n    bottom: 'auto',\r\n    transform: 'translate(-50%, -50%)',\r\n    border: 'none',\r\n    padding: 0,\r\n    boxShadow: '2px 2px 25px 0px black'\r\n  }\r\n}\r\n\r\nexport default class ImagePicker extends Component {\r\n  croppedAreaPixels = null\r\n  cropedImage = null\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      image: '',\r\n      imageSrc: '',\r\n      crop: { x: 0, y: 0 },\r\n      zoom: 1,\r\n      isModal: false\r\n    }\r\n  }\r\n\r\n  onCropChange = crop => {\r\n    this.setState({ crop })\r\n  }\r\n\r\n  onCropComplete = (croppedArea, croppedAreaPixels) => {\r\n    this.croppedAreaPixels = croppedAreaPixels\r\n  }\r\n\r\n  cropImage = async () => {\r\n    this.cropedImage = await getCroppedImg(this.state.imageSrc, this.croppedAreaPixels)\r\n    this.props.getImage(this.cropedImage.file)\r\n    this.handleCloseModal()\r\n  }\r\n\r\n  onZoomChange = zoom => {\r\n    this.setState({ zoom })\r\n  }\r\n\r\n  handleCloseModal = () => (this.setState({ isModal: false }))\r\n\r\n  handleOpenModal = () => (this.setState({ isModal: true }))\r\n\r\n  onImageChange = (event) => {\r\n    if (event.target.files && event.target.files[0]) {\r\n      this.setState({\r\n        imageSrc: URL.createObjectURL(event.target.files[0]),\r\n        isModal: true\r\n      })\r\n    }\r\n  }\r\n\r\n  _renderAvatarPicker = () => {\r\n    return (\r\n      <>\r\n        <div className=\"image-picker\">\r\n          <label htmlFor=\"file-upload\" className=\"custom-file-upload\" >\r\n            {this.cropedImage ?\r\n              <img src={this.cropedImage?.link.url} alt=\"groupPhoto\" style={{ width: 60, height: 60, borderRadius: '50%' }} /> :\r\n              <FontAwesomeIcon icon={faCamera} color={'black'} />\r\n            }\r\n          </label>\r\n          <input id=\"file-upload\" type=\"file\" onChange={this.onImageChange} />\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n\r\n  _renderAttachmentPicker = () => {\r\n    return (\r\n      <div className=\"image-picker-container\">\r\n        <label htmlFor=\"file-upload\" className=\"custom-file-upload-attachment\" >\r\n          <FontAwesomeIcon icon={faPaperclip} color={'#9aa8b5'} />\r\n        </label>\r\n        <input id=\"file-upload\" type=\"file\" onChange={this.onImageChange} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const { pickAsAttachment } = this.props\r\n    const { isModal } = this.state\r\n    return (\r\n      <>\r\n        {pickAsAttachment ?\r\n          this._renderAttachmentPicker() :\r\n          this._renderAvatarPicker()\r\n        }\r\n        <Modal\r\n          isOpen={isModal}\r\n          onRequestClose={this.handleCloseModal}\r\n          ariaHideApp={false}\r\n          style={customStyles}\r\n          overlayClassName=\"Overlay\"\r\n        >\r\n          <>\r\n            <div className=\"image-crop-picker-header\">\r\n              <button onClick={this.cropImage}>Next</button>\r\n              <button onClick={this.handleCloseModal}>Cancel</button>\r\n            </div>\r\n            <div className=\"image-crop-picker-container\">\r\n              <Cropper\r\n                image={this.state.imageSrc}\r\n                crop={this.state.crop}\r\n                zoom={this.state.zoom}\r\n                cropSize={{ width: 300, height: 300 }}\r\n                onCropChange={this.onCropChange}\r\n                onCropComplete={this.onCropComplete}\r\n                onZoomChange={this.onZoomChange}\r\n              />\r\n            </div>\r\n          </>\r\n        </Modal>\r\n      </>\r\n\r\n    )\r\n  }\r\n\r\n}\r\n","import React, { PureComponent } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPaperPlane } from '@fortawesome/free-solid-svg-icons'\r\nimport ImagePicker from '../../../../helpers/imagePicker/imagePicker'\r\nimport './chatInput.css'\r\n\r\nexport default class ChatInput extends PureComponent {\r\n  state = {\r\n    messageText: ''\r\n  }\r\n\r\n  changeMessage = event => (this.setState({ messageText: event.target.value }))\r\n\r\n  sendMessage = (e) => {\r\n    e.preventDefault()\r\n    this.props.sendMessageCallback(this.state.messageText)\r\n      .then(() => (this.setState({ messageText: '' })))\r\n      .catch(() => (this.setState({ messageText: '' })))\r\n  }\r\n\r\n  getImage = (image) => {\r\n    this.props.sendMessageCallback(this.state.messageText, image)\r\n      .then(() => (this.setState({ messageText: '' })))\r\n      .catch(() => (this.setState({ messageText: '' })))\r\n  }\r\n\r\n  render() {\r\n    const { messageText } = this.state\r\n    return (\r\n      <footer>\r\n        <form onSubmit={this.sendMessage}>\r\n          <input\r\n            type=\"text\"\r\n            value={messageText}\r\n            onChange={this.changeMessage}\r\n            placeholder=\"Write your message...\"\r\n            name=\"search\" />\r\n          <div className=\"chat-attachment\">\r\n            <ImagePicker pickAsAttachment getImage={this.getImage} />\r\n          </div>\r\n          <button onClick={this.sendMessage}>\r\n            <FontAwesomeIcon icon={faPaperPlane} color={'white'} />\r\n          </button>\r\n        </form>\r\n      </footer>\r\n    );\r\n  }\r\n}\r\n","import ConnectyCube from 'connectycube'\r\nimport UserModel from '../models/user'\r\nimport store from '../store'\r\nimport { fetchUsers } from '../actions/users'\r\n\r\nclass UsersService {\r\n\r\n  async getUserById(id) {\r\n    ConnectyCube.users.get(id)\r\n  }\r\n\r\n  async getOccupants(ids) {\r\n    const users = this.getUsers\r\n    const currentUser = this.currentUser\r\n    let idsForFetch = []\r\n\r\n    // 140 system ID when a group is created through the admin panel\r\n    ids.forEach(elem => {\r\n      if (elem !== currentUser.id && !users[elem] && elem !== 140) {\r\n        idsForFetch.push(elem)\r\n      }\r\n    })\r\n    if (idsForFetch.length === 0) { return }\r\n    const usersFromServer = await ConnectyCube.users.get({\r\n      per_page: 100,\r\n      filter: {\r\n        field: 'id',\r\n        param: 'in',\r\n        value: idsForFetch,\r\n      },\r\n    })\r\n    const newUsers = usersFromServer.items.map(elem => {\r\n      return new UserModel(elem.user)\r\n    })\r\n    store.dispatch(fetchUsers(newUsers))\r\n  }\r\n\r\n\r\n  getUsersAvatar(ids) {\r\n    const currentUserId = this.currentUser\r\n    let userId = null\r\n    ids.forEach(elem => {\r\n      if (elem !== currentUserId.id) {\r\n        userId = elem\r\n      }\r\n    })\r\n    return store.getState().users[userId].avatar\r\n  }\r\n\r\n  async listUsersByFullName(name, usersIdsToIgnore = []) {\r\n    if (!usersIdsToIgnore) {\r\n      usersIdsToIgnore = [this.currentUser.id]\r\n    }\r\n    const allUsers = await ConnectyCube.users.get({ per_page: 100, full_name: name })\r\n    let contacts = []\r\n    allUsers.items.forEach(elem => {\r\n      if (!usersIdsToIgnore.includes(elem.user.id)) {\r\n        contacts.push(new UserModel(elem.user))\r\n      }\r\n    })\r\n    return contacts\r\n  }\r\n\r\n  get currentUser() {\r\n    return store.getState().currentUser.user\r\n  }\r\n\r\n  get getUsers() {\r\n    return store.getState().users\r\n  }\r\n}\r\n\r\nconst User = new UsersService()\r\n\r\nObject.freeze(User)\r\n\r\nexport default User\r\n\r\n","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faClock } from '@fortawesome/free-solid-svg-icons'\r\nimport { faCheck } from '@fortawesome/free-solid-svg-icons'\r\nimport { faCheckDouble } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport {\r\n  STATUS_DELIVERED,\r\n  STATUS_PENDING,\r\n  STATUS_READ,\r\n  STATUS_SENT\r\n} from '../../../../models/message'\r\n\r\nexport default function MessageSendState({ send_state }) {\r\n  switch (send_state) {\r\n    case STATUS_PENDING:\r\n      return (<FontAwesomeIcon icon={faClock} color={'grey'} />)\r\n    case STATUS_SENT:\r\n      return (<FontAwesomeIcon icon={faCheck} color={'grey'} />)\r\n    case STATUS_DELIVERED:\r\n      return (<FontAwesomeIcon icon={faCheckDouble} color={'grey'} />)\r\n    case STATUS_READ:\r\n      return (<FontAwesomeIcon icon={faCheckDouble} color={'#27ae60'} />)\r\n\r\n    default: return (<FontAwesomeIcon icon={faClock} color={'white'} />)\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { getTime } from '../../../../helpers/lastDate'\r\nimport Avatar from '../../../../helpers/avatar/avatar'\r\nimport { GetMaxWidthMsg } from '../../../../helpers/LayoutUtil'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport MessageSendState from './messageStatus'\r\nimport Modal from 'react-modal'\r\nimport './message.css'\r\n\r\nexport default class Message extends Component {\r\n  // 1 - current & 2 - other\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      isModal: false\r\n    }\r\n  }\r\n\r\n  selectedImg = null\r\n\r\n  customStyles = {\r\n    content: {\r\n      top: '50%',\r\n      left: '50%',\r\n      right: 'auto',\r\n      bottom: 'auto',\r\n      transform: 'translate(-50%, -50%)',\r\n      border: 'none',\r\n      padding: 0,\r\n    }\r\n  }\r\n\r\n  _renderAsStr = (whoIsSender) => {\r\n    const { message } = this.props\r\n    if (whoIsSender === 1) {\r\n      return (\r\n        <>\r\n          <span style={{ wordWrap: 'break-word' }}>{message.body}</span>\r\n          <div className=\"chat-message-right-footer\">\r\n            <span>\r\n              <>\r\n                {getTime(message.date_sent)}\r\n              </>\r\n              <>\r\n                {<MessageSendState send_state={message.send_state} />}\r\n              </>\r\n            </span>\r\n          </div>\r\n        </>\r\n      )\r\n    } else {\r\n      return (\r\n        <>\r\n          <span style={{ wordWrap: 'break-word' }}>{message.body}</span>\r\n          <div className=\"chat-message-left-footer\">\r\n            <span>{getTime(message.date_sent)}</span>\r\n          </div>\r\n        </>\r\n      )\r\n    }\r\n  }\r\n\r\n  renderZoomImg = (event, message) => {\r\n    event.preventDefault()\r\n    this.selectedImg = message.attachment[0]\r\n    this.setState({ isModal: true })\r\n  }\r\n\r\n  handleCloseModal = () => this.setState({ isModal: false })\r\n\r\n  _renderAsAttachment = () => {\r\n    const { message, whoIsSender } = this.props\r\n    return (\r\n      <>\r\n        <div className=\"chat-message-container-attachment\">\r\n          <div style={{\r\n            backgroundImage: `url(${message.attachment[0].url})`,\r\n            backgroundPosition: 'center',\r\n            width: '100%',\r\n            height: '100%',\r\n            border: '1px solid #cbcbcb',\r\n            cursor: 'pointer'\r\n          }}\r\n            onClick={(e) => this.renderZoomImg(e, message)}\r\n          />\r\n        </div>\r\n        {whoIsSender === 1 ?\r\n          <div className=\"chat-message-right-footer\">\r\n            <span>\r\n              <>\r\n                {getTime(message.date_sent)}\r\n              </>\r\n              <>\r\n                {<MessageSendState send_state={message.send_state} />}\r\n              </>\r\n            </span>\r\n          </div> :\r\n          <div className=\"chat-message-left-footer\">\r\n            <span>{getTime(message.date_sent)}</span>\r\n          </div>\r\n        }\r\n      </>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const { message, whoIsSender, participantInfo, notRenderAvatar, widthScroll } = this.props\r\n    const { isModal } = this.state\r\n    const withMsg = new GetMaxWidthMsg(widthScroll)\r\n\r\n    return (\r\n      <>\r\n        {isModal &&\r\n          <Modal\r\n            isOpen={isModal}\r\n            onRequestClose={this.handleCloseModal}\r\n            ariaHideApp={false}\r\n            style={this.customStyles}\r\n            overlayClassName=\"overlay-chat-attachment\"\r\n          >\r\n            <div className=\"active-window-modal-attachment\">\r\n              <FontAwesomeIcon icon={faTimesCircle} color={'white'} onClick={this.handleCloseModal} />\r\n              <img\r\n                src={this.selectedImg.url}\r\n                width={this.selectedImg.width}\r\n                height={this.selectedImg.height}\r\n                alt=\"zoomImg\"\r\n              />\r\n            </div>\r\n          </Modal>\r\n        }\r\n        <div className=\"chat-message-layout\">\r\n          {whoIsSender === 1 ?\r\n            <div className=\"chat-message-wrap chat-message-wrap-right\">\r\n              <div style={{ maxWidth: `${withMsg.currentSender}px` }} className=\"chat-message-container-position-right\">\r\n                {message.attachment ?\r\n                  this._renderAsAttachment(1) :\r\n                  this._renderAsStr(1)\r\n                }\r\n              </div>\r\n            </div> :\r\n            <div className=\"chat-message-wrap chat-message-wrap-left\">\r\n              <div className=\"chat-message-avatar\">\r\n                {notRenderAvatar &&\r\n                  <Avatar photo={participantInfo.avatar} name={participantInfo.name || participantInfo.full_name} size={30} />\r\n                }\r\n              </div>\r\n              <div style={{ maxWidth: `${message.attachment ? withMsg.otherSender + 60 : withMsg.otherSender}px` }} className=\"chat-message-container-position-left\">\r\n                {message.attachment ?\r\n                  this._renderAsAttachment(2) :\r\n                  this._renderAsStr(2)\r\n                }\r\n              </div>\r\n            </div>\r\n          }\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\n","import React, { PureComponent } from 'react'\r\nimport Avatar from '../../../helpers/avatar/avatar'\r\nimport ChatInput from './chatInput/chatInput'\r\nimport { connect } from 'react-redux'\r\nimport ChatService from '../../../services/chat-service'\r\nimport UsersService from '../../../services/users-service'\r\nimport { RecyclerListView, DataProvider } from \"recyclerlistview/web\"\r\nimport { ChatLayoutUtil } from '../../../helpers/LayoutUtil'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport store from '../../../store'\r\nimport Loader from '../../../helpers/loader/loader'\r\nimport { faChevronLeft } from '@fortawesome/free-solid-svg-icons'\r\nimport Message from './message/message'\r\n\r\nimport './chat.css'\r\n\r\nclass Chat extends PureComponent {\r\n  scrollWidth = 0\r\n  scrollHeight = 0\r\n  listenerWindowSize = null\r\n  timer = null\r\n  isFetchingMsg = false\r\n  messagesListRef = null\r\n  listenerLazyLoad = false\r\n  needToGetMoreMessage = null\r\n\r\n\r\n  recycler_Y = 0\r\n  contentHeight = 0\r\n  contentNewOffset = 0\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      isAlredy: true,\r\n      dataProvider: new DataProvider((r1, r2) => {\r\n        return r1 !== r2 || r1.send_state !== r2.send_state\r\n      }),\r\n      layoutProvider: []\r\n    }\r\n    this.currentUserInfo = store.getState().currentUser.user\r\n  }\r\n\r\n\r\n  lazyLoadMessages = (elem, y) => {\r\n    this.recycler_Y = y\r\n    this.contentHeight = elem.nativeEvent.contentSize.height\r\n    if (this.listenerLazyLoad && this.needToGetMoreMessage && y < 2000) {\r\n      this.listenerLazyLoad = false\r\n      ChatService.getMoreMessages(this.props.selectedDialog)\r\n        .then(amountMessages => {\r\n          amountMessages === 100 ? this.needToGetMoreMessage = true : this.needToGetMoreMessage = false\r\n          this.listenerLazyLoad = true\r\n        })\r\n    }\r\n  }\r\n\r\n  getDialogInfo = async () => {\r\n    const dialog = ChatService.getDialogById(this.props.selectedDialog.id)\r\n\r\n    // get info about occupants\r\n    await UsersService.getOccupants(dialog.occupants_ids)\r\n\r\n    ChatService.getMessages(dialog)\r\n      .catch(e => alert(`Error.\\n\\n${JSON.stringify(e)}`))\r\n      .then(amountMessages => {\r\n        amountMessages === 100 ? this.needToGetMoreMessage = true : this.needToGetMoreMessage = false\r\n        this.setState({\r\n          isFetchingMsg: true,\r\n          layoutProvider: ChatLayoutUtil.getChatLayoutProvider({\r\n            width: this.scrollWidth,\r\n            dialogId: dialog.id,\r\n            currentUserId: this.currentUserInfo.id\r\n          }),\r\n          dataProvider: this.state.dataProvider.cloneWithRows(this.props.messages[dialog.id])\r\n        })\r\n        this.scrollToBottom()\r\n        this.listenerLazyLoad = true\r\n      })\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('resize', this.handleResize)\r\n    this.scrollWidth = document.getElementById('chat-body').clientWidth\r\n    this.scrollHeight = document.getElementById('chat-body').clientHeight\r\n    this.getDialogInfo()\r\n  }\r\n\r\n  componentDidUpdate(prewProps) {\r\n    const dialog = ChatService.getDialogById(this.props.selectedDialog.id)\r\n\r\n    if (prewProps.messages[dialog.id] &&\r\n      prewProps.messages[dialog.id] !== this.props.messages[dialog.id]\r\n    ) {\r\n      console.log('{chat} prew props', prewProps.messages[dialog.id])\r\n      console.log('{chat} this props', this.props.messages[dialog.id])\r\n\r\n      if (this.props.messages[dialog.id].length) {\r\n        this.setState({\r\n          dataProvider: this.state.dataProvider.cloneWithRows(this.props.messages[dialog.id])\r\n        }, () => { this.updateScrollPosition() }\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  updateScrollPosition = () => {\r\n    setTimeout(() => {\r\n      const getElement = document.getElementById('chat-body').children[0].children[0].children[0].style.height\r\n      const fullScrollHeight = getElement.slice(0, getElement.length - 2)\r\n      const newOffset = this.recycler_Y + (fullScrollHeight - this.contentHeight)\r\n      this.messagesListRef.scrollToOffset(0, newOffset)\r\n    }, 100)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.handleResize)\r\n  }\r\n\r\n  handleResize = () => {\r\n    this.scrollWidth = document.getElementById('chat-body').clientWidth\r\n    this.scrollHeight = document.getElementById('chat-body').clientHeight\r\n    if (!this.timer) {\r\n      const dialog = ChatService.getDialogById(this.props.selectedDialog.id)\r\n      this.timer = setTimeout(() => {\r\n        clearTimeout(this.timer)\r\n        this.timer = null\r\n        this.setState({\r\n          isAlredy: true,\r\n          layoutProvider: ChatLayoutUtil.getChatLayoutProvider({\r\n            width: this.scrollWidth,\r\n            dialogId: dialog.id,\r\n            currentUserId: this.currentUserInfo.id\r\n          })\r\n        })\r\n      }, 500)\r\n    }\r\n  }\r\n\r\n  sendMessageCallback = async (messageText, img) => {\r\n    const dialog = ChatService.getDialogById(this.props.selectedDialog.id)\r\n    if (messageText.length <= 0 && !img) return\r\n    await ChatService.sendMessage(dialog, messageText, img, this.scrollToBottom)\r\n  }\r\n\r\n  goToSplashPage = () => {\r\n    const { router } = this.props\r\n    router('/home')\r\n  }\r\n\r\n  _renderMessage = (type, item) => {\r\n    const { users } = this.props\r\n    // 1 - current sender & 2 - other sender\r\n    const whoIsSender = this.currentUserInfo.id === item.sender_id ? 1 : 2\r\n    const participantInfo = whoIsSender === 2 ? users[item.sender_id] : null\r\n    let notRenderAvatar = null\r\n\r\n    if (type > 0 && whoIsSender !== 1 &&\r\n      +this.state.dataProvider._data[type - 1].sender_id !== +item.sender_id) {\r\n      notRenderAvatar = true\r\n    }\r\n\r\n    return (\r\n      <Message\r\n        whoIsSender={whoIsSender}\r\n        message={item}\r\n        participantInfo={participantInfo}\r\n        notRenderAvatar={notRenderAvatar}\r\n        widthScroll={this.scrollWidth}\r\n      />\r\n    )\r\n  }\r\n\r\n  getDialogById = () => {\r\n    return ChatService.getDialogById(this.props.selectedDialog.id)\r\n  }\r\n\r\n  scrollToBottom = () => {\r\n    if (this.messagesListRef) {\r\n      this.messagesListRef.scrollToIndex(this.state.dataProvider._data.length - 1, false)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { dataProvider, layoutProvider, isAlredy, isFetchingMsg } = this.state\r\n    const { selectedDialog } = this.props\r\n    let currentDialog\r\n\r\n    if (selectedDialog) {\r\n      currentDialog = this.getDialogById()\r\n    }\r\n\r\n    return (\r\n      <div className=\"chat-container\" >\r\n        <header>\r\n          {window.innerWidth < 768 &&\r\n            <button onClick={this.goToSplashPage}>\r\n              <FontAwesomeIcon icon={faChevronLeft} color={'#212529'} />\r\n              Back\r\n            </button>\r\n          }\r\n          <Avatar photo={currentDialog.photo} name={currentDialog.name} size={50} />\r\n          <h3>{currentDialog.name}</h3>\r\n        </header>\r\n        <div className=\"chat-body\" id=\"chat-body\">\r\n          {isAlredy && isFetchingMsg ?\r\n            dataProvider._data.length > 0 &&\r\n            <>\r\n              <RecyclerListView\r\n                style={{\r\n                  width: this.scrollWidth,\r\n                  height: this.scrollHeight,\r\n                }}\r\n                ref={ref => this.messagesListRef = ref}\r\n                dataProvider={dataProvider}\r\n                layoutProvider={layoutProvider}\r\n                rowRenderer={this._renderMessage}\r\n                onScroll={(elem, x, y) => {\r\n                  this.lazyLoadMessages(elem, y)\r\n                }}\r\n              />\r\n            </> : <Loader />\r\n          }\r\n        </div>\r\n        <ChatInput sendMessageCallback={this.sendMessageCallback} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ selectedDialog, messages, users }) => ({\r\n  selectedDialog,\r\n  messages,\r\n  users\r\n})\r\n\r\nexport default connect(mapStateToProps)(Chat)","import React from 'react'\r\nimport './splashPage.css'\r\n\r\nexport default function SplashPage() {\r\n  return (\r\n    <div className=\"splash-page-container\">\r\n      <p>Please select a chat to start messaging</p>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faChevronLeft } from '@fortawesome/free-solid-svg-icons'\r\nimport './header.css'\r\n\r\nexport default function createDialogHeader({ router }) {\r\n  function goToSplashPage() {\r\n    router('/home/')\r\n  }\r\n  return (\r\n    <div className=\"create-dialog-header\">\r\n      <button onClick={goToSplashPage}>\r\n        <FontAwesomeIcon icon={faChevronLeft} color={'black'} />\r\n        <span>Back</span>\r\n      </button>\r\n    </div>\r\n  )\r\n}","import React, { PureComponent } from 'react'\r\nimport Avatar from '../../../../helpers/avatar/avatar'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faDotCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport { faCheckCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons'\r\nimport './renderUser.css'\r\n\r\nexport default class User extends PureComponent {\r\n  state = {\r\n    isSelectedUser: false\r\n  }\r\n\r\n  toggleUserSelect() {\r\n    const { selectUsers, user } = this.props\r\n    selectUsers(user)\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.selectedUsers !== this.props.selectedUsers) {\r\n      this.setState({ isSelectedUser: this.props.selectedUsers })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { user, selectedUsers, dialogType } = this.props\r\n    const { isSelectedUser } = this.state\r\n    return (\r\n      <div className=\"render-search-user\" onClick={() => this.toggleUserSelect()}>\r\n        <div className=\"render-search-user-info\">\r\n          <Avatar photo={user.avatar} name={user.full_name} size={40} />\r\n          <span>{user.full_name}</span>\r\n        </div>\r\n        {dialogType ? isSelectedUser || selectedUsers ? (\r\n          <FontAwesomeIcon icon={faCheckCircle} color={'green'} />\r\n        ) : (\r\n            <FontAwesomeIcon icon={faDotCircle} color={'black'} />\r\n          ) : <FontAwesomeIcon icon={faArrowRight} color={'green'} />\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n","import React, { PureComponent } from 'react';\r\nimport CreateDialogHeader from './createDialogHeader/header'\r\nimport ImagePicker from '../../../helpers/imagePicker/imagePicker'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faUser } from '@fortawesome/free-solid-svg-icons'\r\nimport { faUsers } from '@fortawesome/free-solid-svg-icons'\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\r\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport UsersService from '../../../services/users-service'\r\nimport ChatService from '../../../services/chat-service'\r\nimport Loader from '../../../helpers/loader/loader'\r\nimport swal from 'sweetalert'\r\nimport Avatar from '../../../helpers/avatar/avatar'\r\n\r\nimport RenderUser from './renderUser/renderUser'\r\n\r\nimport './createDialog.css'\r\n\r\nexport default class CreateDialog extends PureComponent {\r\n  listUsers = []\r\n  userNotFound = false\r\n  selectedUsers = []\r\n  isGroupDetails = false\r\n  image = null\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      keyword: '',\r\n      isLoader: false,\r\n      dialogType: false,\r\n      dialogName: '',\r\n      isUpdate: false,\r\n    }\r\n  }\r\n\r\n  toggleUserSelect = (user) => {\r\n    let newArr = []\r\n    this.selectedUsers.forEach(elem => {\r\n      if (elem.id !== user.id) {\r\n        newArr.push(elem)\r\n      }\r\n    })\r\n    this.selectedUsers = newArr\r\n    this.setState({ isUpdate: !this.state.isUpdate })\r\n  }\r\n\r\n  getImage = (image) => {\r\n    this.image = image\r\n  }\r\n\r\n  createDialog = () => {\r\n    let str = this.state.dialogName.trim()\r\n    const { router } = this.props\r\n\r\n    if (str.length < 3) {\r\n      return swal('Warning', 'Enter more than 4 characters for group subject')\r\n    }\r\n    this.setState({ isLoader: true })\r\n    const occupants_ids = this.selectedUsers.map(elem => {\r\n      return elem.id\r\n    })\r\n    ChatService.createPublicDialog(occupants_ids, str, this.image)\r\n      .then((newDialog) => {\r\n        this.setState({ isLoader: false })\r\n        ChatService.setSelectDialog(newDialog)\r\n        ChatService.sendChatAlertOnCreate(newDialog)\r\n        router('/home/chat')\r\n      })\r\n      .catch((error) => {\r\n        this.setState({ isLoader: false })\r\n        swal('Error', error)\r\n      })\r\n  }\r\n\r\n  searchUsers = (e) => {\r\n    e.preventDefault()\r\n    const { keyword } = this.state\r\n    let str = keyword.trim()\r\n    if (str.length > 2) {\r\n      this.setState({ isLoader: true })\r\n      UsersService.listUsersByFullName(str)\r\n        .then(users => {\r\n          this.listUsers = users\r\n          this.userNotFound = false\r\n          this.setState({ isLoader: false })\r\n        })\r\n        .catch(() => {\r\n          this.userNotFound = true\r\n          this.setState({ isLoader: false })\r\n        })\r\n    } else {\r\n      swal('Warning', `Enter more than 3 characters`)\r\n    }\r\n  }\r\n\r\n  changeTypeDialog = () => {\r\n    this.selectedUsers = []\r\n    this.setState({ dialogType: !this.state.dialogType })\r\n  }\r\n\r\n  selectUsers = (user) => {\r\n    const { router } = this.props\r\n\r\n    // False - Private dialog \r\n    if (!this.state.dialogType) {\r\n      return ChatService.createPrivateDialog(user.id)\r\n        .then((newDialog) => {\r\n          ChatService.setSelectDialog(newDialog)\r\n          ChatService.sendChatAlertOnCreate(newDialog)\r\n          router('/home/chat')\r\n        })\r\n        .catch((error) => {\r\n          this.setState({ isLoader: false })\r\n          swal('Error', error)\r\n        })\r\n    }\r\n\r\n    // True - Publick dialog \r\n    const userSelect = this.selectedUsers.find(elem => elem.id === user.id)\r\n    if (userSelect) {\r\n      let newArr = []\r\n      this.selectedUsers.forEach(elem => {\r\n        if (elem.id !== user.id) {\r\n          newArr.push(elem)\r\n        }\r\n      })\r\n      this.selectedUsers = newArr\r\n    } else {\r\n      if (this.selectedUsers.length === 9) {\r\n        swal('Warning', `Maximum 9 participants`)\r\n        return\r\n      }\r\n      this.selectedUsers.push(user)\r\n    }\r\n    this.setState({ isUpdate: !this.state.isUpdate })\r\n  }\r\n\r\n  _renderUser = (item) => {\r\n    const isSelected = this.selectedUsers.find(elem => elem.id === item.id)\r\n    return (\r\n      <RenderUser\r\n        user={item}\r\n        selectUsers={this.selectUsers}\r\n        dialogType={this.state.dialogType}\r\n        selectedUsers={isSelected ? true : false}\r\n        key={item.id}\r\n      />\r\n    )\r\n  }\r\n\r\n  changeSearch = (event) => (this.setState({ keyword: event.target.value }))\r\n\r\n  changeDialogName = (event) => (this.setState({ dialogName: event.target.value }))\r\n\r\n  _renderSelectedUsers = (elem) => {\r\n    return (\r\n      <button\r\n        key={elem.id}\r\n        className=\"create-dialog-body-selected-avatar\"\r\n        onClick={() => this.toggleUserSelect(elem)}\r\n      >\r\n        <Avatar\r\n          photo={elem.avatar}\r\n          name={elem.full_name}\r\n          size={40}\r\n        />\r\n        <FontAwesomeIcon icon={faTimesCircle} color={'grey'} />\r\n      </button>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const { router } = this.props\r\n    const { keyword, dialogType, isLoader, dialogName } = this.state\r\n    const renderHeader = window.innerWidth < 768 ? 0 : 50\r\n    const calHeight = dialogType ? 470 - renderHeader : 390 - renderHeader\r\n\r\n    return (\r\n      <div className=\"create-dialog-container\">\r\n        {window.innerWidth < 768 &&\r\n          <CreateDialogHeader router={router} />\r\n        }\r\n        {isLoader &&\r\n          <div style={{ position: 'absolute', width: '100%', height: '100%' }}>\r\n            <Loader />\r\n          </div>\r\n        }\r\n        <div className=\"create-dialog-body\">\r\n          <div className=\"create-dialog-body-groupinfo\">\r\n            <ImagePicker getImage={this.getImage} />\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Group Subject\"\r\n              value={dialogName}\r\n              onChange={this.changeDialogName} />\r\n          </div>\r\n          <form className=\"create-dialog-body-search\" onSubmit={this.searchUsers}>\r\n            <input\r\n              type=\"text\"\r\n              value={keyword}\r\n              onChange={this.changeSearch}\r\n              required\r\n              placeholder=\"Type contact name\"\r\n              name=\"search\" />\r\n            <button onClick={this.searchUsers}>\r\n              <FontAwesomeIcon icon={faSearch} color={'white'} />\r\n            </button>\r\n          </form>\r\n\r\n          <div className=\"create-dialog-body-type-dialog\">\r\n            <button onClick={this.changeTypeDialog}>\r\n              {dialogType ? <FontAwesomeIcon icon={faUsers} color={'#27ae60'} /> :\r\n                <FontAwesomeIcon icon={faUser} color={'#27ae60'} />\r\n              }\r\n              <span>{dialogType ? `Create private chat` : `Create group chat`}</span>\r\n            </button>\r\n          </div>\r\n\r\n          {dialogType && this.selectedUsers.length > 0 &&\r\n            <div className=\"create-dialog-body-selected-users\">\r\n              {this.selectedUsers.map(elem => (\r\n                this._renderSelectedUsers(elem)\r\n              ))\r\n              }\r\n            </div>\r\n          }\r\n\r\n          {this.userNotFound ?\r\n            <h5>Couldn't find user</h5> :\r\n            <div className=\"create-dialog-body-users\" style={{ height: `calc(100vh - ${calHeight}px)` }}>\r\n              {\r\n                this.listUsers.map((elem) => {\r\n                  return (\r\n                    this._renderUser(elem)\r\n                  )\r\n                })\r\n              }\r\n            </div>\r\n          }\r\n\r\n          {this.selectedUsers.length > 0 &&\r\n            <div className=\"create-dialog-body-btn\">\r\n              <button onClick={this.createDialog}>Create grup</button>\r\n            </div>\r\n          }\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react'\r\nimport { Row, Col } from 'react-bootstrap'\r\nimport { Route, Redirect, HashRouter as Router } from \"react-router-dom\"\r\nimport ChatService from '../../services/chat-service'\r\nimport SideBar from './sideBar/sideBar'\r\nimport Chat from './chat/chat'\r\nimport SplashPage from './splashPage/splashPage'\r\nimport CreateDialog from './createDialog/createDialog'\r\nimport Auth from '../auth/auth'\r\nimport './home.css'\r\n\r\n\r\nexport default class Home extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      routName: false,\r\n      routerUrl: props.match.url\r\n    }\r\n    props.history.replace(\"/home\")\r\n    this.windowWidth = window.innerWidth\r\n  }\r\n\r\n  componentDidMount() {\r\n    ChatService.setUpListeners()\r\n  }\r\n\r\n  changeRouter = (router) => {\r\n    this.setState({ routerUrl: router })\r\n  }\r\n\r\n  render() {\r\n    const { routerUrl } = this.state\r\n    const { match } = this.props\r\n\r\n    return (\r\n      <div className=\"home-frame\">\r\n        <div className=\"home-active-container\">\r\n          {this.windowWidth >= 768 ?\r\n            <Row className=\"default-row\">\r\n              <Col sm={12} md={5} lg={5} xl={3} className=\"default-grid\">\r\n                <SideBar router={this.changeRouter} />\r\n              </Col>\r\n              <Col sm={12} md={7} lg={7} xl={9} className=\"default-grid\">\r\n                <Router>\r\n                  <Route\r\n                    exact\r\n                    path={`${match.url}`}\r\n                    component={SplashPage}\r\n                  />\r\n                  <Route\r\n                    path={`${match.url}/create-dialog`}\r\n                    component={() => <CreateDialog router={this.changeRouter} />}\r\n                  />\r\n                  <Route\r\n                    path={`${match.url}/chat`}\r\n                    component={() => <Chat router={this.changeRouter} />}\r\n                  />\r\n                  <Redirect to={routerUrl} />\r\n                </Router>\r\n              </Col>\r\n            </Row> :\r\n\r\n            <Row>\r\n              <Col sm={12} md={5} lg={5} xl={3} className=\"default-grid\">\r\n                <Router>\r\n                  <Route\r\n                    exact\r\n                    path={`${match.url}`}\r\n                    component={() => <SideBar router={this.changeRouter} />}\r\n                  />\r\n                  <Route\r\n                    path={`${match.url}/create-dialog`}\r\n                    component={() => <CreateDialog router={this.changeRouter} />}\r\n                  />\r\n                  <Route\r\n                    path={`${match.url}/chat`}\r\n                    component={() => <Chat router={this.changeRouter} />}\r\n                  />\r\n                  <Route\r\n                    path={`/auth`}\r\n                    component={() => <Auth isSmallDevice />}\r\n                  />\r\n                  <Redirect to={routerUrl} />\r\n                </Router>\r\n              </Col>\r\n            </Row>\r\n          }\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport { Provider } from 'react-redux'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Redirect\r\n} from \"react-router-dom\"\r\nimport ChatService from '../services/chat-service'\r\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css'\r\nimport store from '../store'\r\nimport AuthService from '../services/auth-service'\r\nimport Auth from './auth/auth'\r\nimport Home from './home/home'\r\nimport Loader from '../helpers/loader/loader'\r\n\r\n\r\nexport default class Main extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      routName: false,\r\n      isLoader: true\r\n    }\r\n    this.initUser()\r\n  }\r\n\r\n  initUser = async () => {\r\n    const routLink = await AuthService.init()\r\n    this.setState({ routName: routLink, isLoader: false })\r\n  }\r\n\r\n  render() {\r\n    const { routName, isLoader } = this.state\r\n    return (\r\n\r\n      <Router>\r\n        <Provider store={store}>\r\n          {isLoader ?\r\n            <div style={{ position: 'absolute', width: '100%', height: '100%' }}>\r\n              <Loader />\r\n            </div>\r\n            : <>\r\n              <Route path=\"/home\" component={Home} />\r\n              <Route path=\"/auth\" component={Auth} />\r\n              <Redirect to={routName} />\r\n            </>\r\n          }\r\n        </Provider>\r\n      </Router>\r\n    )\r\n  }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport Main from './components/main'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<Main />, document.getElementById('root'))\r\n\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}